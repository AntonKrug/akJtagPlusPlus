
akJtagPlusPlus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e7c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08007028  08007028  00017028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007348  08007348  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  08007348  08007348  00017348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007350  08007350  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007350  08007350  00017350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08007358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000050  080073a8  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  080073a8  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000200d8  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000378c  00000000  00000000  00040158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  000438e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001848  00000000  00000000  00045270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026afa  00000000  00000000  00046ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc29  00000000  00000000  0006d5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5839  00000000  00000000  0008a1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016fa14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d3c  00000000  00000000  0016fa68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000050 	.word	0x20000050
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007010 	.word	0x08007010

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000054 	.word	0x20000054
 80001e8:	08007010 	.word	0x08007010

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b598      	push	{r3, r4, r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f002 fa40 	bl	800296c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f84c 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 fac0 	bl	8000a74 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80004f4:	f000 f8cc 	bl	8000690 <MX_DMA2D_Init>
  MX_FMC_Init();
 80004f8:	f000 fa6c 	bl	80009d4 <MX_FMC_Init>
  MX_LTDC_Init();
 80004fc:	f000 f93a 	bl	8000774 <MX_LTDC_Init>
  MX_TIM1_Init();
 8000500:	f000 f9ee 	bl	80008e0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000504:	f000 fa3c 	bl	8000980 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8000508:	f000 f8f4 	bl	80006f4 <MX_I2C3_Init>
  MX_SPI5_Init();
 800050c:	f000 f9b2 	bl	8000874 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize the LCD */
  BSP_LCD_Init();
 8000510:	f001 fb36 	bl	8001b80 <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit();
 8000514:	f001 fb66 	bl	8001be4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8000518:	2000      	movs	r0, #0
 800051a:	f001 fb79 	bl	8001c10 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800051e:	f04f 30ff 	mov.w	r0, #4294967295
 8000522:	f001 fbd1 	bl	8001cc8 <BSP_LCD_Clear>
//  BSP_LCD_SetColorKeying(0, LCD_COLOR_WHITE);
//  BSP_LCD_SetLayerVisible(0, ENABLE);

  BSP_LCD_SelectLayer(0);
 8000526:	2000      	movs	r0, #0
 8000528:	f001 fb72 	bl	8001c10 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 800052c:	f001 fea4 	bl	8002278 <BSP_LCD_DisplayOn>

  BSP_LCD_SetFont(&Font8);
 8000530:	4812      	ldr	r0, [pc, #72]	; (800057c <main+0x98>)
 8000532:	f001 fbaf 	bl	8001c94 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000536:	4812      	ldr	r0, [pc, #72]	; (8000580 <main+0x9c>)
 8000538:	f001 fb7a 	bl	8001c30 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 800053c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000540:	f001 fb8e 	bl	8001c60 <BSP_LCD_SetBackColor>

  BSP_LCD_DrawCircle(100, 100, 50);
 8000544:	2232      	movs	r2, #50	; 0x32
 8000546:	2164      	movs	r1, #100	; 0x64
 8000548:	2064      	movs	r0, #100	; 0x64
 800054a:	f001 fdab 	bl	80020a4 <BSP_LCD_DrawCircle>

  BSP_LCD_DrawRect(61, 0, (BSP_LCD_GetXSize()-61), (BSP_LCD_GetYSize()-60));
 800054e:	f001 fb31 	bl	8001bb4 <BSP_LCD_GetXSize>
 8000552:	4603      	mov	r3, r0
 8000554:	b29b      	uxth	r3, r3
 8000556:	3b3d      	subs	r3, #61	; 0x3d
 8000558:	b29c      	uxth	r4, r3
 800055a:	f001 fb37 	bl	8001bcc <BSP_LCD_GetYSize>
 800055e:	4603      	mov	r3, r0
 8000560:	b29b      	uxth	r3, r3
 8000562:	3b3c      	subs	r3, #60	; 0x3c
 8000564:	b29b      	uxth	r3, r3
 8000566:	4622      	mov	r2, r4
 8000568:	2100      	movs	r1, #0
 800056a:	203d      	movs	r0, #61	; 0x3d
 800056c:	f001 fd68 	bl	8002040 <BSP_LCD_DrawRect>

  BSP_LCD_DisplayString(5, 5, "Ahoj");
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <main+0xa0>)
 8000572:	2105      	movs	r1, #5
 8000574:	2005      	movs	r0, #5
 8000576:	f001 fc13 	bl	8001da0 <BSP_LCD_DisplayString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057a:	e7fe      	b.n	800057a <main+0x96>
 800057c:	20000040 	.word	0x20000040
 8000580:	ffff0000 	.word	0xffff0000
 8000584:	08007028 	.word	0x08007028

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b0a0      	sub	sp, #128	; 0x80
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f006 fd32 	bl	8007000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2230      	movs	r2, #48	; 0x30
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f006 fd23 	bl	8007000 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b32      	ldr	r3, [pc, #200]	; (8000688 <SystemClock_Config+0x100>)
 80005c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c2:	4a31      	ldr	r2, [pc, #196]	; (8000688 <SystemClock_Config+0x100>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ca:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <SystemClock_Config+0x100>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b2c      	ldr	r3, [pc, #176]	; (800068c <SystemClock_Config+0x104>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a2b      	ldr	r2, [pc, #172]	; (800068c <SystemClock_Config+0x104>)
 80005e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e4:	6013      	str	r3, [r2, #0]
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <SystemClock_Config+0x104>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f2:	2301      	movs	r3, #1
 80005f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000600:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000604:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000606:	2308      	movs	r3, #8
 8000608:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 800060a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800060e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000614:	2303      	movs	r3, #3
 8000616:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800061c:	4618      	mov	r0, r3
 800061e:	f004 f841 	bl	80046a4 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000628:	f000 fb64 	bl	8000cf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000638:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000644:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000648:	2105      	movs	r1, #5
 800064a:	4618      	mov	r0, r3
 800064c:	f004 faa2 	bl	8004b94 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000656:	f000 fb4d 	bl	8000cf4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800065a:	2308      	movs	r3, #8
 800065c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800065e:	23c0      	movs	r3, #192	; 0xc0
 8000660:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000662:	2302      	movs	r3, #2
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000666:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4618      	mov	r0, r3
 8000672:	f004 fcbd 	bl	8004ff0 <HAL_RCCEx_PeriphCLKConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800067c:	f000 fb3a 	bl	8000cf4 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3780      	adds	r7, #128	; 0x80
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_DMA2D_Init+0x5c>)
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <MX_DMA2D_Init+0x60>)
 8000698:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_DMA2D_Init+0x5c>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006c6:	f002 fc57 	bl	8002f78 <HAL_DMA2D_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006d0:	f000 fb10 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006d4:	2101      	movs	r1, #1
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006d8:	f002 febc 	bl	8003454 <HAL_DMA2D_ConfigLayer>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006e2:	f000 fb07 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000314 	.word	0x20000314
 80006f0:	4002b000 	.word	0x4002b000

080006f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_I2C3_Init+0x74>)
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <MX_I2C3_Init+0x78>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_I2C3_Init+0x74>)
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <MX_I2C3_Init+0x7c>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_I2C3_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_I2C3_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_I2C3_Init+0x74>)
 8000712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000716:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_I2C3_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C3_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_I2C3_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C3_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_I2C3_Init+0x74>)
 8000732:	f003 fa8f 	bl	8003c54 <HAL_I2C_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800073c:	f000 fada 	bl	8000cf4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <MX_I2C3_Init+0x74>)
 8000744:	f003 fbca 	bl	8003edc <HAL_I2CEx_ConfigAnalogFilter>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800074e:	f000 fad1 	bl	8000cf4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_I2C3_Init+0x74>)
 8000756:	f003 fbfd 	bl	8003f54 <HAL_I2CEx_ConfigDigitalFilter>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 fac8 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000134 	.word	0x20000134
 800076c:	40005c00 	.word	0x40005c00
 8000770:	000186a0 	.word	0x000186a0

08000774 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08e      	sub	sp, #56	; 0x38
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2234      	movs	r2, #52	; 0x34
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f006 fc3d 	bl	8007000 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <MX_LTDC_Init+0xf8>)
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <MX_LTDC_Init+0xfc>)
 800078a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800078c:	4b37      	ldr	r3, [pc, #220]	; (800086c <MX_LTDC_Init+0xf8>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000792:	4b36      	ldr	r3, [pc, #216]	; (800086c <MX_LTDC_Init+0xf8>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000798:	4b34      	ldr	r3, [pc, #208]	; (800086c <MX_LTDC_Init+0xf8>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <MX_LTDC_Init+0xf8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007a4:	4b31      	ldr	r3, [pc, #196]	; (800086c <MX_LTDC_Init+0xf8>)
 80007a6:	2209      	movs	r2, #9
 80007a8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007aa:	4b30      	ldr	r3, [pc, #192]	; (800086c <MX_LTDC_Init+0xf8>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007b0:	4b2e      	ldr	r3, [pc, #184]	; (800086c <MX_LTDC_Init+0xf8>)
 80007b2:	221d      	movs	r2, #29
 80007b4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007b6:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_LTDC_Init+0xf8>)
 80007b8:	2203      	movs	r2, #3
 80007ba:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_LTDC_Init+0xf8>)
 80007be:	f240 120d 	movw	r2, #269	; 0x10d
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <MX_LTDC_Init+0xf8>)
 80007c6:	f240 1243 	movw	r2, #323	; 0x143
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <MX_LTDC_Init+0xf8>)
 80007ce:	f240 1217 	movw	r2, #279	; 0x117
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_LTDC_Init+0xf8>)
 80007d6:	f240 1247 	movw	r2, #327	; 0x147
 80007da:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <MX_LTDC_Init+0xf8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_LTDC_Init+0xf8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_LTDC_Init+0xf8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007f4:	481d      	ldr	r0, [pc, #116]	; (800086c <MX_LTDC_Init+0xf8>)
 80007f6:	f003 fbed 	bl	8003fd4 <HAL_LTDC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000800:	f000 fa78 	bl	8000cf4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000808:	23f0      	movs	r3, #240	; 0xf0
 800080a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000810:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000814:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800081a:	23ff      	movs	r3, #255	; 0xff
 800081c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000822:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000826:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000828:	2307      	movs	r3, #7
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800082c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000832:	23f0      	movs	r3, #240	; 0xf0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000836:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_LTDC_Init+0xf8>)
 8000856:	f003 fd4f 	bl	80042f8 <HAL_LTDC_ConfigLayer>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000860:	f000 fa48 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3738      	adds	r7, #56	; 0x38
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200001e0 	.word	0x200001e0
 8000870:	40016800 	.word	0x40016800

08000874 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_SPI5_Init+0x64>)
 800087a:	4a18      	ldr	r2, [pc, #96]	; (80008dc <MX_SPI5_Init+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_SPI5_Init+0x64>)
 8000880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000884:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_SPI5_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_SPI5_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_SPI5_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_SPI5_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008a8:	2218      	movs	r2, #24
 80008aa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008c0:	220a      	movs	r2, #10
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008c6:	f004 fdd0 	bl	800546a <HAL_SPI_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008d0:	f000 fa10 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000188 	.word	0x20000188
 80008dc:	40015000 	.word	0x40015000

080008e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_TIM1_Init+0x98>)
 80008fe:	4a1f      	ldr	r2, [pc, #124]	; (800097c <MX_TIM1_Init+0x9c>)
 8000900:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_TIM1_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_TIM1_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_TIM1_Init+0x98>)
 8000910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000914:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_TIM1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_TIM1_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_TIM1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000928:	4813      	ldr	r0, [pc, #76]	; (8000978 <MX_TIM1_Init+0x98>)
 800092a:	f005 fb6f 	bl	800600c <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000934:	f000 f9de 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_TIM1_Init+0x98>)
 8000946:	f005 fd29 	bl	800639c <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000950:	f000 f9d0 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_TIM1_Init+0x98>)
 8000962:	f005 ff41 	bl	80067e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800096c:	f000 f9c2 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200002cc 	.word	0x200002cc
 800097c:	40010000 	.word	0x40010000

08000980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART1_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b8:	f005 ffa6 	bl	8006908 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 f997 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000288 	.word	0x20000288
 80009d0:	40011000 	.word	0x40011000

080009d4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
 80009e8:	615a      	str	r2, [r3, #20]
 80009ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_FMC_Init+0x98>)
 80009ee:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <MX_FMC_Init+0x9c>)
 80009f0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80009f2:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MX_FMC_Init+0x98>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_FMC_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a00:	2204      	movs	r2, #4
 8000a02:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a06:	2210      	movs	r2, #16
 8000a08:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a0c:	2240      	movs	r2, #64	; 0x40
 8000a0e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a12:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a16:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a24:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a40:	2307      	movs	r3, #7
 8000a42:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a44:	2303      	movs	r3, #3
 8000a46:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a56:	f004 fc89 	bl	800536c <HAL_SDRAM_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a60:	f000 f948 	bl	8000cf4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000354 	.word	0x20000354
 8000a70:	a0000140 	.word	0xa0000140

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
 8000a8e:	4b89      	ldr	r3, [pc, #548]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a88      	ldr	r2, [pc, #544]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b86      	ldr	r3, [pc, #536]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	623b      	str	r3, [r7, #32]
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	4b82      	ldr	r3, [pc, #520]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a81      	ldr	r2, [pc, #516]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000ab0:	f043 0320 	orr.w	r3, r3, #32
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b7f      	ldr	r3, [pc, #508]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0320 	and.w	r3, r3, #32
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	4b7b      	ldr	r3, [pc, #492]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a7a      	ldr	r2, [pc, #488]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b78      	ldr	r3, [pc, #480]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	61bb      	str	r3, [r7, #24]
 8000adc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	4b74      	ldr	r3, [pc, #464]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a73      	ldr	r2, [pc, #460]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b71      	ldr	r3, [pc, #452]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b6d      	ldr	r3, [pc, #436]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a6c      	ldr	r2, [pc, #432]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b6a      	ldr	r3, [pc, #424]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b66      	ldr	r3, [pc, #408]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a65      	ldr	r2, [pc, #404]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b63      	ldr	r3, [pc, #396]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	4b5f      	ldr	r3, [pc, #380]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a5e      	ldr	r2, [pc, #376]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b3c:	f043 0310 	orr.w	r3, r3, #16
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b5c      	ldr	r3, [pc, #368]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0310 	and.w	r3, r3, #16
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b58      	ldr	r3, [pc, #352]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a57      	ldr	r2, [pc, #348]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b55      	ldr	r3, [pc, #340]	; (8000cb4 <MX_GPIO_Init+0x240>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2116      	movs	r1, #22
 8000b6e:	4852      	ldr	r0, [pc, #328]	; (8000cb8 <MX_GPIO_Init+0x244>)
 8000b70:	f003 f856 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	4850      	ldr	r0, [pc, #320]	; (8000cbc <MX_GPIO_Init+0x248>)
 8000b7a:	f003 f851 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b84:	484e      	ldr	r0, [pc, #312]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000b86:	f003 f84b 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b90:	484c      	ldr	r0, [pc, #304]	; (8000cc4 <MX_GPIO_Init+0x250>)
 8000b92:	f003 f845 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b96:	2316      	movs	r3, #22
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	4842      	ldr	r0, [pc, #264]	; (8000cb8 <MX_GPIO_Init+0x244>)
 8000bae:	f002 fd7f 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bb2:	f248 0307 	movw	r3, #32775	; 0x8007
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bb8:	4b43      	ldr	r3, [pc, #268]	; (8000cc8 <MX_GPIO_Init+0x254>)
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	483d      	ldr	r0, [pc, #244]	; (8000cbc <MX_GPIO_Init+0x248>)
 8000bc8:	f002 fd72 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	4619      	mov	r1, r3
 8000be2:	4836      	ldr	r0, [pc, #216]	; (8000cbc <MX_GPIO_Init+0x248>)
 8000be4:	f002 fd64 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000be8:	2320      	movs	r3, #32
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bec:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <MX_GPIO_Init+0x254>)
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	482f      	ldr	r0, [pc, #188]	; (8000cb8 <MX_GPIO_Init+0x244>)
 8000bfc:	f002 fd58 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c00:	2304      	movs	r3, #4
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	482e      	ldr	r0, [pc, #184]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000c14:	f002 fd4c 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000c18:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	4825      	ldr	r0, [pc, #148]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000c36:	f002 fd3b 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	481f      	ldr	r0, [pc, #124]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000c50:	f002 fd2e 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000c6a:	f002 fd21 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c6e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <MX_GPIO_Init+0x24c>)
 8000c88:	f002 fd12 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c8c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <MX_GPIO_Init+0x250>)
 8000ca6:	f002 fd03 	bl	80036b0 <HAL_GPIO_Init>

}
 8000caa:	bf00      	nop
 8000cac:	3738      	adds	r7, #56	; 0x38
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40020c00 	.word	0x40020c00
 8000cc4:	40021800 	.word	0x40021800
 8000cc8:	10120000 	.word	0x10120000
 8000ccc:	40020400 	.word	0x40020400

08000cd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d101      	bne.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ce2:	f001 fe65 	bl	80029b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40001000 	.word	0x40001000

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	; 0x44
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_DMA2D_MspInit+0x48>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d115      	bne.n	8000d8e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_DMA2D_MspInit+0x4c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <HAL_DMA2D_MspInit+0x4c>)
 8000d6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_DMA2D_MspInit+0x4c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2105      	movs	r1, #5
 8000d82:	205a      	movs	r0, #90	; 0x5a
 8000d84:	f001 ff10 	bl	8002ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000d88:	205a      	movs	r0, #90	; 0x5a
 8000d8a:	f001 ff29 	bl	8002be0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	4002b000 	.word	0x4002b000
 8000d9c:	40023800 	.word	0x40023800

08000da0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a29      	ldr	r2, [pc, #164]	; (8000e64 <HAL_I2C_MspInit+0xc4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d14b      	bne.n	8000e5a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <HAL_I2C_MspInit+0xc8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <HAL_I2C_MspInit+0xc8>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <HAL_I2C_MspInit+0xc8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <HAL_I2C_MspInit+0xc8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a20      	ldr	r2, [pc, #128]	; (8000e68 <HAL_I2C_MspInit+0xc8>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <HAL_I2C_MspInit+0xc8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e00:	2312      	movs	r3, #18
 8000e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4815      	ldr	r0, [pc, #84]	; (8000e6c <HAL_I2C_MspInit+0xcc>)
 8000e18:	f002 fc4a 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e22:	2312      	movs	r3, #18
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <HAL_I2C_MspInit+0xd0>)
 8000e3a:	f002 fc39 	bl	80036b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_I2C_MspInit+0xc8>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_I2C_MspInit+0xc8>)
 8000e48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_I2C_MspInit+0xc8>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	; 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40005c00 	.word	0x40005c00
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020800 	.word	0x40020800
 8000e70:	40020000 	.word	0x40020000

08000e74 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08e      	sub	sp, #56	; 0x38
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a7b      	ldr	r2, [pc, #492]	; (8001080 <HAL_LTDC_MspInit+0x20c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	f040 80f0 	bne.w	8001078 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
 8000e9c:	4b79      	ldr	r3, [pc, #484]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea0:	4a78      	ldr	r2, [pc, #480]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000ea2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ea6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea8:	4b76      	ldr	r3, [pc, #472]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000eb0:	623b      	str	r3, [r7, #32]
 8000eb2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
 8000eb8:	4b72      	ldr	r3, [pc, #456]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	4a71      	ldr	r2, [pc, #452]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000ebe:	f043 0320 	orr.w	r3, r3, #32
 8000ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec4:	4b6f      	ldr	r3, [pc, #444]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	f003 0320 	and.w	r3, r3, #32
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
 8000ed4:	4b6b      	ldr	r3, [pc, #428]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4a6a      	ldr	r2, [pc, #424]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee0:	4b68      	ldr	r3, [pc, #416]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	4b64      	ldr	r3, [pc, #400]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	4a63      	ldr	r2, [pc, #396]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	6313      	str	r3, [r2, #48]	; 0x30
 8000efc:	4b61      	ldr	r3, [pc, #388]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	4b5d      	ldr	r3, [pc, #372]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	4a5c      	ldr	r2, [pc, #368]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f16:	6313      	str	r3, [r2, #48]	; 0x30
 8000f18:	4b5a      	ldr	r3, [pc, #360]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	4b56      	ldr	r3, [pc, #344]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	4a55      	ldr	r2, [pc, #340]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6313      	str	r3, [r2, #48]	; 0x30
 8000f34:	4b53      	ldr	r3, [pc, #332]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	4b4f      	ldr	r3, [pc, #316]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	4a4e      	ldr	r2, [pc, #312]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f50:	4b4c      	ldr	r3, [pc, #304]	; (8001084 <HAL_LTDC_MspInit+0x210>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f6e:	230e      	movs	r3, #14
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	4619      	mov	r1, r3
 8000f78:	4843      	ldr	r0, [pc, #268]	; (8001088 <HAL_LTDC_MspInit+0x214>)
 8000f7a:	f002 fb99 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000f7e:	f641 0358 	movw	r3, #6232	; 0x1858
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f90:	230e      	movs	r3, #14
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	483c      	ldr	r0, [pc, #240]	; (800108c <HAL_LTDC_MspInit+0x218>)
 8000f9c:	f002 fb88 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fb0:	2309      	movs	r3, #9
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4835      	ldr	r0, [pc, #212]	; (8001090 <HAL_LTDC_MspInit+0x21c>)
 8000fbc:	f002 fb78 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000fc0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fd2:	230e      	movs	r3, #14
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	482c      	ldr	r0, [pc, #176]	; (8001090 <HAL_LTDC_MspInit+0x21c>)
 8000fde:	f002 fb67 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000fe2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ff4:	230e      	movs	r3, #14
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4825      	ldr	r0, [pc, #148]	; (8001094 <HAL_LTDC_MspInit+0x220>)
 8001000:	f002 fb56 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001004:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001016:	230e      	movs	r3, #14
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	4619      	mov	r1, r3
 8001020:	481d      	ldr	r0, [pc, #116]	; (8001098 <HAL_LTDC_MspInit+0x224>)
 8001022:	f002 fb45 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001026:	2348      	movs	r3, #72	; 0x48
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001036:	230e      	movs	r3, #14
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	4816      	ldr	r0, [pc, #88]	; (800109c <HAL_LTDC_MspInit+0x228>)
 8001042:	f002 fb35 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001046:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001058:	2309      	movs	r3, #9
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <HAL_LTDC_MspInit+0x220>)
 8001064:	f002 fb24 	bl	80036b0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2105      	movs	r1, #5
 800106c:	2058      	movs	r0, #88	; 0x58
 800106e:	f001 fd9b 	bl	8002ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001072:	2058      	movs	r0, #88	; 0x58
 8001074:	f001 fdb4 	bl	8002be0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001078:	bf00      	nop
 800107a:	3738      	adds	r7, #56	; 0x38
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40016800 	.word	0x40016800
 8001084:	40023800 	.word	0x40023800
 8001088:	40021400 	.word	0x40021400
 800108c:	40020000 	.word	0x40020000
 8001090:	40020400 	.word	0x40020400
 8001094:	40021800 	.word	0x40021800
 8001098:	40020800 	.word	0x40020800
 800109c:	40020c00 	.word	0x40020c00

080010a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_SPI_MspInit+0x84>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12c      	bne.n	800111c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_SPI_MspInit+0x88>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <HAL_SPI_MspInit+0x88>)
 80010cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_SPI_MspInit+0x88>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_SPI_MspInit+0x88>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_SPI_MspInit+0x88>)
 80010e8:	f043 0320 	orr.w	r3, r3, #32
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_SPI_MspInit+0x88>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0320 	and.w	r3, r3, #32
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80010fa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800110c:	2305      	movs	r3, #5
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <HAL_SPI_MspInit+0x8c>)
 8001118:	f002 faca 	bl	80036b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40015000 	.word	0x40015000
 8001128:	40023800 	.word	0x40023800
 800112c:	40021400 	.word	0x40021400

08001130 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_SPI_MspDeInit+0x30>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10a      	bne.n	8001158 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_SPI_MspDeInit+0x34>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_SPI_MspDeInit+0x34>)
 8001148:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800114e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_SPI_MspDeInit+0x38>)
 8001154:	f002 fc58 	bl	8003a08 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40015000 	.word	0x40015000
 8001164:	40023800 	.word	0x40023800
 8001168:	40021400 	.word	0x40021400

0800116c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <HAL_TIM_Base_MspInit+0x3c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d10d      	bne.n	800119a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_TIM_Base_MspInit+0x40>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a09      	ldr	r2, [pc, #36]	; (80011ac <HAL_TIM_Base_MspInit+0x40>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <HAL_TIM_Base_MspInit+0x40>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40010000 	.word	0x40010000
 80011ac:	40023800 	.word	0x40023800

080011b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a19      	ldr	r2, [pc, #100]	; (8001234 <HAL_UART_MspInit+0x84>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d12c      	bne.n	800122c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <HAL_UART_MspInit+0x88>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a17      	ldr	r2, [pc, #92]	; (8001238 <HAL_UART_MspInit+0x88>)
 80011dc:	f043 0310 	orr.w	r3, r3, #16
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_UART_MspInit+0x88>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_UART_MspInit+0x88>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a10      	ldr	r2, [pc, #64]	; (8001238 <HAL_UART_MspInit+0x88>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_UART_MspInit+0x88>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800120a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800121c:	2307      	movs	r3, #7
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <HAL_UART_MspInit+0x8c>)
 8001228:	f002 fa42 	bl	80036b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40011000 	.word	0x40011000
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000

08001240 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001254:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <HAL_FMC_MspInit+0x104>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d16f      	bne.n	800133c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800125c:	4b39      	ldr	r3, [pc, #228]	; (8001344 <HAL_FMC_MspInit+0x104>)
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <HAL_FMC_MspInit+0x108>)
 8001268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126a:	4a37      	ldr	r2, [pc, #220]	; (8001348 <HAL_FMC_MspInit+0x108>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6393      	str	r3, [r2, #56]	; 0x38
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <HAL_FMC_MspInit+0x108>)
 8001274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800127e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001282:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001290:	230c      	movs	r3, #12
 8001292:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4619      	mov	r1, r3
 8001298:	482c      	ldr	r0, [pc, #176]	; (800134c <HAL_FMC_MspInit+0x10c>)
 800129a:	f002 fa09 	bl	80036b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800129e:	2301      	movs	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ae:	230c      	movs	r3, #12
 80012b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4826      	ldr	r0, [pc, #152]	; (8001350 <HAL_FMC_MspInit+0x110>)
 80012b8:	f002 f9fa 	bl	80036b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80012bc:	f248 1333 	movw	r3, #33075	; 0x8133
 80012c0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ce:	230c      	movs	r3, #12
 80012d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	481f      	ldr	r0, [pc, #124]	; (8001354 <HAL_FMC_MspInit+0x114>)
 80012d8:	f002 f9ea 	bl	80036b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80012dc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80012e0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ee:	230c      	movs	r3, #12
 80012f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4818      	ldr	r0, [pc, #96]	; (8001358 <HAL_FMC_MspInit+0x118>)
 80012f8:	f002 f9da 	bl	80036b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80012fc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001300:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800130e:	230c      	movs	r3, #12
 8001310:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	4811      	ldr	r0, [pc, #68]	; (800135c <HAL_FMC_MspInit+0x11c>)
 8001318:	f002 f9ca 	bl	80036b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800131c:	2360      	movs	r3, #96	; 0x60
 800131e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800132c:	230c      	movs	r3, #12
 800132e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4619      	mov	r1, r3
 8001334:	480a      	ldr	r0, [pc, #40]	; (8001360 <HAL_FMC_MspInit+0x120>)
 8001336:	f002 f9bb 	bl	80036b0 <HAL_GPIO_Init>
 800133a:	e000      	b.n	800133e <HAL_FMC_MspInit+0xfe>
    return;
 800133c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000006c 	.word	0x2000006c
 8001348:	40023800 	.word	0x40023800
 800134c:	40021400 	.word	0x40021400
 8001350:	40020800 	.word	0x40020800
 8001354:	40021800 	.word	0x40021800
 8001358:	40021000 	.word	0x40021000
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40020400 	.word	0x40020400

08001364 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800136c:	f7ff ff68 	bl	8001240 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	2036      	movs	r0, #54	; 0x36
 800138e:	f001 fc0b 	bl	8002ba8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001392:	2036      	movs	r0, #54	; 0x36
 8001394:	f001 fc24 	bl	8002be0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <HAL_InitTick+0xa4>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	4a1e      	ldr	r2, [pc, #120]	; (800141c <HAL_InitTick+0xa4>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	6413      	str	r3, [r2, #64]	; 0x40
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <HAL_InitTick+0xa4>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013b4:	f107 0210 	add.w	r2, r7, #16
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 fde4 	bl	8004f8c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80013c4:	f003 fdba 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 80013c8:	4603      	mov	r3, r0
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d0:	4a13      	ldr	r2, [pc, #76]	; (8001420 <HAL_InitTick+0xa8>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0c9b      	lsrs	r3, r3, #18
 80013d8:	3b01      	subs	r3, #1
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_InitTick+0xac>)
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <HAL_InitTick+0xb0>)
 80013e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_InitTick+0xac>)
 80013e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013e8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_InitTick+0xac>)
 80013ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_InitTick+0xac>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_InitTick+0xac>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013fc:	4809      	ldr	r0, [pc, #36]	; (8001424 <HAL_InitTick+0xac>)
 80013fe:	f004 fe05 	bl	800600c <HAL_TIM_Base_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d104      	bne.n	8001412 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001408:	4806      	ldr	r0, [pc, #24]	; (8001424 <HAL_InitTick+0xac>)
 800140a:	f004 fe4f 	bl	80060ac <HAL_TIM_Base_Start_IT>
 800140e:	4603      	mov	r3, r0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3730      	adds	r7, #48	; 0x30
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	431bde83 	.word	0x431bde83
 8001424:	20000388 	.word	0x20000388
 8001428:	40001000 	.word	0x40001000

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <NMI_Handler+0x4>

08001432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <MemManage_Handler+0x4>

0800143e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <BusFault_Handler+0x4>

08001444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <UsageFault_Handler+0x4>

0800144a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <TIM6_DAC_IRQHandler+0x10>)
 800148a:	f004 fe7f 	bl	800618c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000388 	.word	0x20000388

08001498 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <LTDC_IRQHandler+0x10>)
 800149e:	f002 fe69 	bl	8004174 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200001e0 	.word	0x200001e0

080014ac <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <DMA2D_IRQHandler+0x10>)
 80014b2:	f001 febe 	bl	8003232 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000314 	.word	0x20000314

080014c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <SystemInit+0x20>)
 80014c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <SystemInit+0x20>)
 80014cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800151c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ea:	490e      	ldr	r1, [pc, #56]	; (8001524 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014ec:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001500:	4c0b      	ldr	r4, [pc, #44]	; (8001530 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800150e:	f7ff ffd7 	bl	80014c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001512:	f005 fd51 	bl	8006fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001516:	f7fe ffe5 	bl	80004e4 <main>
  bx  lr    
 800151a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800151c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001528:	08007358 	.word	0x08007358
  ldr r2, =_sbss
 800152c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001530:	200003d8 	.word	0x200003d8

08001534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC_IRQHandler>

08001536 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800153a:	f000 fa27 	bl	800198c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800153e:	20ca      	movs	r0, #202	; 0xca
 8001540:	f000 f95d 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001544:	20c3      	movs	r0, #195	; 0xc3
 8001546:	f000 f967 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800154a:	2008      	movs	r0, #8
 800154c:	f000 f964 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001550:	2050      	movs	r0, #80	; 0x50
 8001552:	f000 f961 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001556:	20cf      	movs	r0, #207	; 0xcf
 8001558:	f000 f951 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800155c:	2000      	movs	r0, #0
 800155e:	f000 f95b 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001562:	20c1      	movs	r0, #193	; 0xc1
 8001564:	f000 f958 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001568:	2030      	movs	r0, #48	; 0x30
 800156a:	f000 f955 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800156e:	20ed      	movs	r0, #237	; 0xed
 8001570:	f000 f945 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001574:	2064      	movs	r0, #100	; 0x64
 8001576:	f000 f94f 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800157a:	2003      	movs	r0, #3
 800157c:	f000 f94c 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001580:	2012      	movs	r0, #18
 8001582:	f000 f949 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001586:	2081      	movs	r0, #129	; 0x81
 8001588:	f000 f946 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800158c:	20e8      	movs	r0, #232	; 0xe8
 800158e:	f000 f936 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001592:	2085      	movs	r0, #133	; 0x85
 8001594:	f000 f940 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001598:	2000      	movs	r0, #0
 800159a:	f000 f93d 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800159e:	2078      	movs	r0, #120	; 0x78
 80015a0:	f000 f93a 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80015a4:	20cb      	movs	r0, #203	; 0xcb
 80015a6:	f000 f92a 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80015aa:	2039      	movs	r0, #57	; 0x39
 80015ac:	f000 f934 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80015b0:	202c      	movs	r0, #44	; 0x2c
 80015b2:	f000 f931 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f000 f92e 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80015bc:	2034      	movs	r0, #52	; 0x34
 80015be:	f000 f92b 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80015c2:	2002      	movs	r0, #2
 80015c4:	f000 f928 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80015c8:	20f7      	movs	r0, #247	; 0xf7
 80015ca:	f000 f918 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80015ce:	2020      	movs	r0, #32
 80015d0:	f000 f922 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80015d4:	20ea      	movs	r0, #234	; 0xea
 80015d6:	f000 f912 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80015da:	2000      	movs	r0, #0
 80015dc:	f000 f91c 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f000 f919 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80015e6:	20b1      	movs	r0, #177	; 0xb1
 80015e8:	f000 f909 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 f913 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80015f2:	201b      	movs	r0, #27
 80015f4:	f000 f910 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80015f8:	20b6      	movs	r0, #182	; 0xb6
 80015fa:	f000 f900 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80015fe:	200a      	movs	r0, #10
 8001600:	f000 f90a 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001604:	20a2      	movs	r0, #162	; 0xa2
 8001606:	f000 f907 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800160a:	20c0      	movs	r0, #192	; 0xc0
 800160c:	f000 f8f7 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001610:	2010      	movs	r0, #16
 8001612:	f000 f901 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001616:	20c1      	movs	r0, #193	; 0xc1
 8001618:	f000 f8f1 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800161c:	2010      	movs	r0, #16
 800161e:	f000 f8fb 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001622:	20c5      	movs	r0, #197	; 0xc5
 8001624:	f000 f8eb 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001628:	2045      	movs	r0, #69	; 0x45
 800162a:	f000 f8f5 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800162e:	2015      	movs	r0, #21
 8001630:	f000 f8f2 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001634:	20c7      	movs	r0, #199	; 0xc7
 8001636:	f000 f8e2 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800163a:	2090      	movs	r0, #144	; 0x90
 800163c:	f000 f8ec 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001640:	2036      	movs	r0, #54	; 0x36
 8001642:	f000 f8dc 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001646:	20c8      	movs	r0, #200	; 0xc8
 8001648:	f000 f8e6 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800164c:	20f2      	movs	r0, #242	; 0xf2
 800164e:	f000 f8d6 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001652:	2000      	movs	r0, #0
 8001654:	f000 f8e0 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001658:	20b0      	movs	r0, #176	; 0xb0
 800165a:	f000 f8d0 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800165e:	20c2      	movs	r0, #194	; 0xc2
 8001660:	f000 f8da 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001664:	20b6      	movs	r0, #182	; 0xb6
 8001666:	f000 f8ca 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800166a:	200a      	movs	r0, #10
 800166c:	f000 f8d4 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001670:	20a7      	movs	r0, #167	; 0xa7
 8001672:	f000 f8d1 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001676:	2027      	movs	r0, #39	; 0x27
 8001678:	f000 f8ce 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800167c:	2004      	movs	r0, #4
 800167e:	f000 f8cb 	bl	8001818 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001682:	202a      	movs	r0, #42	; 0x2a
 8001684:	f000 f8bb 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001688:	2000      	movs	r0, #0
 800168a:	f000 f8c5 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800168e:	2000      	movs	r0, #0
 8001690:	f000 f8c2 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001694:	2000      	movs	r0, #0
 8001696:	f000 f8bf 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800169a:	20ef      	movs	r0, #239	; 0xef
 800169c:	f000 f8bc 	bl	8001818 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80016a0:	202b      	movs	r0, #43	; 0x2b
 80016a2:	f000 f8ac 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f000 f8b6 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f000 f8b3 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f000 f8b0 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80016b8:	203f      	movs	r0, #63	; 0x3f
 80016ba:	f000 f8ad 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80016be:	20f6      	movs	r0, #246	; 0xf6
 80016c0:	f000 f89d 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80016c4:	2001      	movs	r0, #1
 80016c6:	f000 f8a7 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f000 f8a4 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80016d0:	2006      	movs	r0, #6
 80016d2:	f000 f8a1 	bl	8001818 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80016d6:	202c      	movs	r0, #44	; 0x2c
 80016d8:	f000 f891 	bl	80017fe <ili9341_WriteReg>
  LCD_Delay(200);
 80016dc:	20c8      	movs	r0, #200	; 0xc8
 80016de:	f000 fa43 	bl	8001b68 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80016e2:	2026      	movs	r0, #38	; 0x26
 80016e4:	f000 f88b 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f000 f895 	bl	8001818 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80016ee:	20e0      	movs	r0, #224	; 0xe0
 80016f0:	f000 f885 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80016f4:	200f      	movs	r0, #15
 80016f6:	f000 f88f 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80016fa:	2029      	movs	r0, #41	; 0x29
 80016fc:	f000 f88c 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001700:	2024      	movs	r0, #36	; 0x24
 8001702:	f000 f889 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001706:	200c      	movs	r0, #12
 8001708:	f000 f886 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800170c:	200e      	movs	r0, #14
 800170e:	f000 f883 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001712:	2009      	movs	r0, #9
 8001714:	f000 f880 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001718:	204e      	movs	r0, #78	; 0x4e
 800171a:	f000 f87d 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800171e:	2078      	movs	r0, #120	; 0x78
 8001720:	f000 f87a 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001724:	203c      	movs	r0, #60	; 0x3c
 8001726:	f000 f877 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800172a:	2009      	movs	r0, #9
 800172c:	f000 f874 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001730:	2013      	movs	r0, #19
 8001732:	f000 f871 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001736:	2005      	movs	r0, #5
 8001738:	f000 f86e 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800173c:	2017      	movs	r0, #23
 800173e:	f000 f86b 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001742:	2011      	movs	r0, #17
 8001744:	f000 f868 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001748:	2000      	movs	r0, #0
 800174a:	f000 f865 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800174e:	20e1      	movs	r0, #225	; 0xe1
 8001750:	f000 f855 	bl	80017fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001754:	2000      	movs	r0, #0
 8001756:	f000 f85f 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800175a:	2016      	movs	r0, #22
 800175c:	f000 f85c 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001760:	201b      	movs	r0, #27
 8001762:	f000 f859 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001766:	2004      	movs	r0, #4
 8001768:	f000 f856 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800176c:	2011      	movs	r0, #17
 800176e:	f000 f853 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001772:	2007      	movs	r0, #7
 8001774:	f000 f850 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001778:	2031      	movs	r0, #49	; 0x31
 800177a:	f000 f84d 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800177e:	2033      	movs	r0, #51	; 0x33
 8001780:	f000 f84a 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001784:	2042      	movs	r0, #66	; 0x42
 8001786:	f000 f847 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800178a:	2005      	movs	r0, #5
 800178c:	f000 f844 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001790:	200c      	movs	r0, #12
 8001792:	f000 f841 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001796:	200a      	movs	r0, #10
 8001798:	f000 f83e 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800179c:	2028      	movs	r0, #40	; 0x28
 800179e:	f000 f83b 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80017a2:	202f      	movs	r0, #47	; 0x2f
 80017a4:	f000 f838 	bl	8001818 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80017a8:	200f      	movs	r0, #15
 80017aa:	f000 f835 	bl	8001818 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80017ae:	2011      	movs	r0, #17
 80017b0:	f000 f825 	bl	80017fe <ili9341_WriteReg>
  LCD_Delay(200);
 80017b4:	20c8      	movs	r0, #200	; 0xc8
 80017b6:	f000 f9d7 	bl	8001b68 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80017ba:	2029      	movs	r0, #41	; 0x29
 80017bc:	f000 f81f 	bl	80017fe <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80017c0:	202c      	movs	r0, #44	; 0x2c
 80017c2:	f000 f81c 	bl	80017fe <ili9341_WriteReg>
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}

080017ca <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80017ce:	f000 f8dd 	bl	800198c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80017d2:	2103      	movs	r1, #3
 80017d4:	20d3      	movs	r0, #211	; 0xd3
 80017d6:	f000 f82c 	bl	8001832 <ili9341_ReadData>
 80017da:	4603      	mov	r3, r0
 80017dc:	b29b      	uxth	r3, r3
}
 80017de:	4618      	mov	r0, r3
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80017e6:	2029      	movs	r0, #41	; 0x29
 80017e8:	f000 f809 	bl	80017fe <ili9341_WriteReg>
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80017f4:	2028      	movs	r0, #40	; 0x28
 80017f6:	f000 f802 	bl	80017fe <ili9341_WriteReg>
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}

080017fe <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f958 	bl	8001ac0 <LCD_IO_WriteReg>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	4618      	mov	r0, r3
 8001826:	f000 f929 	bl	8001a7c <LCD_IO_WriteData>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	460a      	mov	r2, r1
 800183c:	80fb      	strh	r3, [r7, #6]
 800183e:	4613      	mov	r3, r2
 8001840:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001842:	797a      	ldrb	r2, [r7, #5]
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f95b 	bl	8001b04 <LCD_IO_ReadData>
 800184e:	4603      	mov	r3, r0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800185c:	23f0      	movs	r3, #240	; 0xf0
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800186c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
    SPIx_MspInit();
 800187e:	f000 f84d 	bl	800191c <SPIx_MspInit>
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <SPIx_Read+0x38>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f107 0108 	add.w	r1, r7, #8
 80018a2:	4808      	ldr	r0, [pc, #32]	; (80018c4 <SPIx_Read+0x3c>)
 80018a4:	f003 ffce 	bl	8005844 <HAL_SPI_Receive>
 80018a8:	4603      	mov	r3, r0
 80018aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80018b2:	f000 f827 	bl	8001904 <SPIx_Error>
  }
  
  return readvalue;
 80018b6:	68bb      	ldr	r3, [r7, #8]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000003c 	.word	0x2000003c
 80018c4:	20000188 	.word	0x20000188

080018c8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, SpixTimeout);
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <SPIx_Write+0x34>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	1db9      	adds	r1, r7, #6
 80018dc:	2201      	movs	r2, #1
 80018de:	4808      	ldr	r0, [pc, #32]	; (8001900 <SPIx_Write+0x38>)
 80018e0:	f003 fe74 	bl	80055cc <HAL_SPI_Transmit>
 80018e4:	4603      	mov	r3, r0
 80018e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80018ee:	f000 f809 	bl	8001904 <SPIx_Error>
  }
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000003c 	.word	0x2000003c
 8001900:	20000188 	.word	0x20000188

08001904 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hspi5);
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <SPIx_Error+0x14>)
 800190a:	f003 fe37 	bl	800557c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800190e:	f7ff ffb4 	bl	800187a <SPIx_Init>
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000188 	.word	0x20000188

0800191c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit()
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <SPIx_MspInit+0x68>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	4a16      	ldr	r2, [pc, #88]	; (8001984 <SPIx_MspInit+0x68>)
 800192c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001930:	6453      	str	r3, [r2, #68]	; 0x44
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <SPIx_MspInit+0x68>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <SPIx_MspInit+0x68>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <SPIx_MspInit+0x68>)
 8001948:	f043 0320 	orr.w	r3, r3, #32
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <SPIx_MspInit+0x68>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0320 	and.w	r3, r3, #32
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800195a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800195e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001964:	2302      	movs	r3, #2
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001968:	2301      	movs	r3, #1
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800196c:	2305      	movs	r3, #5
 800196e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	4619      	mov	r1, r3
 8001976:	4804      	ldr	r0, [pc, #16]	; (8001988 <SPIx_MspInit+0x6c>)
 8001978:	f001 fe9a 	bl	80036b0 <HAL_GPIO_Init>
}
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	40021400 	.word	0x40021400

0800198c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001992:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <LCD_IO_Init+0xe0>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d164      	bne.n	8001a64 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800199a:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <LCD_IO_Init+0xe0>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <LCD_IO_Init+0xe4>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	4a31      	ldr	r2, [pc, #196]	; (8001a70 <LCD_IO_Init+0xe4>)
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	6313      	str	r3, [r2, #48]	; 0x30
 80019b0:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <LCD_IO_Init+0xe4>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80019bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	4619      	mov	r1, r3
 80019d4:	4827      	ldr	r0, [pc, #156]	; (8001a74 <LCD_IO_Init+0xe8>)
 80019d6:	f001 fe6b 	bl	80036b0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <LCD_IO_Init+0xe4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a23      	ldr	r2, [pc, #140]	; (8001a70 <LCD_IO_Init+0xe4>)
 80019e4:	f043 0308 	orr.w	r3, r3, #8
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <LCD_IO_Init+0xe4>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80019f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80019fc:	2301      	movs	r3, #1
 80019fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001a04:	2302      	movs	r3, #2
 8001a06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4819      	ldr	r0, [pc, #100]	; (8001a74 <LCD_IO_Init+0xe8>)
 8001a10:	f001 fe4e 	bl	80036b0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <LCD_IO_Init+0xe4>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <LCD_IO_Init+0xe4>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	6313      	str	r3, [r2, #48]	; 0x30
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <LCD_IO_Init+0xe4>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001a30:	2304      	movs	r3, #4
 8001a32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4619      	mov	r1, r3
 8001a46:	480c      	ldr	r0, [pc, #48]	; (8001a78 <LCD_IO_Init+0xec>)
 8001a48:	f001 fe32 	bl	80036b0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2104      	movs	r1, #4
 8001a50:	4809      	ldr	r0, [pc, #36]	; (8001a78 <LCD_IO_Init+0xec>)
 8001a52:	f002 f8e5 	bl	8003c20 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001a56:	2201      	movs	r2, #1
 8001a58:	2104      	movs	r1, #4
 8001a5a:	4807      	ldr	r0, [pc, #28]	; (8001a78 <LCD_IO_Init+0xec>)
 8001a5c:	f002 f8e0 	bl	8003c20 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001a60:	f7ff ff0b 	bl	800187a <SPIx_Init>
  }
}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000070 	.word	0x20000070
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40020c00 	.word	0x40020c00
 8001a78:	40020800 	.word	0x40020800

08001a7c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001a86:	2201      	movs	r2, #1
 8001a88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a8c:	480a      	ldr	r0, [pc, #40]	; (8001ab8 <LCD_IO_WriteData+0x3c>)
 8001a8e:	f002 f8c7 	bl	8003c20 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001a92:	2200      	movs	r2, #0
 8001a94:	2104      	movs	r1, #4
 8001a96:	4809      	ldr	r0, [pc, #36]	; (8001abc <LCD_IO_WriteData+0x40>)
 8001a98:	f002 f8c2 	bl	8003c20 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff12 	bl	80018c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <LCD_IO_WriteData+0x40>)
 8001aaa:	f002 f8b9 	bl	8003c20 <HAL_GPIO_WritePin>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40020c00 	.word	0x40020c00
 8001abc:	40020800 	.word	0x40020800

08001ac0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001aca:	2200      	movs	r2, #0
 8001acc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad0:	480a      	ldr	r0, [pc, #40]	; (8001afc <LCD_IO_WriteReg+0x3c>)
 8001ad2:	f002 f8a5 	bl	8003c20 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2104      	movs	r1, #4
 8001ada:	4809      	ldr	r0, [pc, #36]	; (8001b00 <LCD_IO_WriteReg+0x40>)
 8001adc:	f002 f8a0 	bl	8003c20 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff feef 	bl	80018c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001aea:	2201      	movs	r2, #1
 8001aec:	2104      	movs	r1, #4
 8001aee:	4804      	ldr	r0, [pc, #16]	; (8001b00 <LCD_IO_WriteReg+0x40>)
 8001af0:	f002 f896 	bl	8003c20 <HAL_GPIO_WritePin>
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40020c00 	.word	0x40020c00
 8001b00:	40020800 	.word	0x40020800

08001b04 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	80fb      	strh	r3, [r7, #6]
 8001b10:	4613      	mov	r3, r2
 8001b12:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	4810      	ldr	r0, [pc, #64]	; (8001b60 <LCD_IO_ReadData+0x5c>)
 8001b1e:	f002 f87f 	bl	8003c20 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001b22:	2200      	movs	r2, #0
 8001b24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b28:	480e      	ldr	r0, [pc, #56]	; (8001b64 <LCD_IO_ReadData+0x60>)
 8001b2a:	f002 f879 	bl	8003c20 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fec9 	bl	80018c8 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001b36:	797b      	ldrb	r3, [r7, #5]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fea5 	bl	8001888 <SPIx_Read>
 8001b3e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001b40:	2201      	movs	r2, #1
 8001b42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b46:	4807      	ldr	r0, [pc, #28]	; (8001b64 <LCD_IO_ReadData+0x60>)
 8001b48:	f002 f86a 	bl	8003c20 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2104      	movs	r1, #4
 8001b50:	4803      	ldr	r0, [pc, #12]	; (8001b60 <LCD_IO_ReadData+0x5c>)
 8001b52:	f002 f865 	bl	8003c20 <HAL_GPIO_WritePin>
  
  return readvalue;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40020800 	.word	0x40020800
 8001b64:	40020c00 	.word	0x40020c00

08001b68 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 ff3d 	bl	80029f0 <HAL_Delay>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    
    BSP_LCD_MspInit();
 8001b84:	f000 fb88 	bl	8002298 <BSP_LCD_MspInit>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <BSP_LCD_Init+0x28>)
 8001b8a:	4a08      	ldr	r2, [pc, #32]	; (8001bac <BSP_LCD_Init+0x2c>)
 8001b8c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <BSP_LCD_Init+0x28>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001b96:	f000 fd6d 	bl	8002674 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <BSP_LCD_Init+0x30>)
 8001b9c:	f000 f87a 	bl	8001c94 <BSP_LCD_SetFont>

  return LCD_OK;
 8001ba0:	2300      	movs	r3, #0
}  
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200003d0 	.word	0x200003d0
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	20000040 	.word	0x20000040

08001bb4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <BSP_LCD_GetXSize+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	4798      	blx	r3
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200003d0 	.word	0x200003d0

08001bcc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <BSP_LCD_GetYSize+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	4798      	blx	r3
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200003d0 	.word	0x200003d0

08001be4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit()
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  DrawProp[0].BackColor = LCD_COLOR_WHITE;
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <BSP_LCD_LayerDefaultInit+0x24>)
 8001bea:	f04f 32ff 	mov.w	r2, #4294967295
 8001bee:	605a      	str	r2, [r3, #4]
  DrawProp[0].pFont     = &Font8;
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <BSP_LCD_LayerDefaultInit+0x24>)
 8001bf2:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <BSP_LCD_LayerDefaultInit+0x28>)
 8001bf4:	609a      	str	r2, [r3, #8]
  DrawProp[0].TextColor = LCD_COLOR_BLACK;
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <BSP_LCD_LayerDefaultInit+0x24>)
 8001bf8:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001bfc:	601a      	str	r2, [r3, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	200000b8 	.word	0x200000b8
 8001c0c:	20000040 	.word	0x20000040

08001c10 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <BSP_LCD_SelectLayer+0x1c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200000b4 	.word	0x200000b4

08001c30 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <BSP_LCD_SetTextColor+0x28>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4907      	ldr	r1, [pc, #28]	; (8001c5c <BSP_LCD_SetTextColor+0x2c>)
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	601a      	str	r2, [r3, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	200000b4 	.word	0x200000b4
 8001c5c:	200000b8 	.word	0x200000b8

08001c60 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <BSP_LCD_SetBackColor+0x2c>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4908      	ldr	r1, [pc, #32]	; (8001c90 <BSP_LCD_SetBackColor+0x30>)
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	3304      	adds	r3, #4
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	601a      	str	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	200000b4 	.word	0x200000b4
 8001c90:	200000b8 	.word	0x200000b8

08001c94 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <BSP_LCD_SetFont+0x2c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <BSP_LCD_SetFont+0x30>)
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	3308      	adds	r3, #8
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	601a      	str	r2, [r3, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	200000b4 	.word	0x200000b4
 8001cc4:	200000b8 	.word	0x200000b8

08001cc8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(hltdc.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <BSP_LCD_Clear+0x48>)
 8001cd2:	681c      	ldr	r4, [r3, #0]
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <BSP_LCD_Clear+0x48>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <BSP_LCD_Clear+0x4c>)
 8001cda:	2134      	movs	r1, #52	; 0x34
 8001cdc:	fb01 f303 	mul.w	r3, r1, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	335c      	adds	r3, #92	; 0x5c
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	461e      	mov	r6, r3
 8001ce8:	f7ff ff64 	bl	8001bb4 <BSP_LCD_GetXSize>
 8001cec:	4605      	mov	r5, r0
 8001cee:	f7ff ff6d 	bl	8001bcc <BSP_LCD_GetYSize>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	462a      	mov	r2, r5
 8001d00:	4631      	mov	r1, r6
 8001d02:	4620      	mov	r0, r4
 8001d04:	f000 fc7e 	bl	8002604 <FillBuffer>
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d10:	200000b4 	.word	0x200000b4
 8001d14:	200001e0 	.word	0x200001e0

08001d18 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	80fb      	strh	r3, [r7, #6]
 8001d22:	460b      	mov	r3, r1
 8001d24:	80bb      	strh	r3, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <BSP_LCD_DisplayChar+0x80>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	491b      	ldr	r1, [pc, #108]	; (8001d9c <BSP_LCD_DisplayChar+0x84>)
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	3308      	adds	r3, #8
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6819      	ldr	r1, [r3, #0]
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <BSP_LCD_DisplayChar+0x80>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4c14      	ldr	r4, [pc, #80]	; (8001d9c <BSP_LCD_DisplayChar+0x84>)
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4423      	add	r3, r4
 8001d56:	3308      	adds	r3, #8
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001d5c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <BSP_LCD_DisplayChar+0x80>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4c0d      	ldr	r4, [pc, #52]	; (8001d9c <BSP_LCD_DisplayChar+0x84>)
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4423      	add	r3, r4
 8001d70:	3308      	adds	r3, #8
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	889b      	ldrh	r3, [r3, #4]
 8001d76:	3307      	adds	r3, #7
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	da00      	bge.n	8001d7e <BSP_LCD_DisplayChar+0x66>
 8001d7c:	3307      	adds	r3, #7
 8001d7e:	10db      	asrs	r3, r3, #3
 8001d80:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001d84:	18ca      	adds	r2, r1, r3
 8001d86:	88b9      	ldrh	r1, [r7, #4]
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 fb80 	bl	8002490 <DrawChar>
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	200000b4 	.word	0x200000b4
 8001d9c:	200000b8 	.word	0x200000b8

08001da0 <BSP_LCD_DisplayString>:
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */

void BSP_LCD_DisplayString(uint16_t X, uint16_t Y, char *pText)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	603a      	str	r2, [r7, #0]
 8001daa:	80fb      	strh	r3, [r7, #6]
 8001dac:	460b      	mov	r3, r1
 8001dae:	80bb      	strh	r3, [r7, #4]
	BSP_LCD_DisplayStringAt(X, Y, (uint8_t *)pText, LEFT_MODE);
 8001db0:	88b9      	ldrh	r1, [r7, #4]
 8001db2:	88f8      	ldrh	r0, [r7, #6]
 8001db4:	2303      	movs	r3, #3
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	f000 f804 	bl	8001dc4 <BSP_LCD_DisplayStringAt>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <BSP_LCD_DisplayStringAt>:

void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001dc4:	b5b0      	push	{r4, r5, r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60ba      	str	r2, [r7, #8]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4603      	mov	r3, r0
 8001dd0:	81fb      	strh	r3, [r7, #14]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	81bb      	strh	r3, [r7, #12]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	83fb      	strh	r3, [r7, #30]
 8001dde:	2300      	movs	r3, #0
 8001de0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001dee:	e002      	b.n	8001df6 <BSP_LCD_DisplayStringAt+0x32>
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	3301      	adds	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	617a      	str	r2, [r7, #20]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f6      	bne.n	8001df0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001e02:	f7ff fed7 	bl	8001bb4 <BSP_LCD_GetXSize>
 8001e06:	4601      	mov	r1, r0
 8001e08:	4b4b      	ldr	r3, [pc, #300]	; (8001f38 <BSP_LCD_DisplayStringAt+0x174>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	484b      	ldr	r0, [pc, #300]	; (8001f3c <BSP_LCD_DisplayStringAt+0x178>)
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4403      	add	r3, r0
 8001e18:	3308      	adds	r3, #8
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	889b      	ldrh	r3, [r3, #4]
 8001e1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e22:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d01c      	beq.n	8001e64 <BSP_LCD_DisplayStringAt+0xa0>
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	dc33      	bgt.n	8001e96 <BSP_LCD_DisplayStringAt+0xd2>
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d002      	beq.n	8001e38 <BSP_LCD_DisplayStringAt+0x74>
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d019      	beq.n	8001e6a <BSP_LCD_DisplayStringAt+0xa6>
 8001e36:	e02e      	b.n	8001e96 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	1ad1      	subs	r1, r2, r3
 8001e3e:	4b3e      	ldr	r3, [pc, #248]	; (8001f38 <BSP_LCD_DisplayStringAt+0x174>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	483e      	ldr	r0, [pc, #248]	; (8001f3c <BSP_LCD_DisplayStringAt+0x178>)
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4403      	add	r3, r0
 8001e4e:	3308      	adds	r3, #8
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	889b      	ldrh	r3, [r3, #4]
 8001e54:	fb03 f301 	mul.w	r3, r3, r1
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	89fb      	ldrh	r3, [r7, #14]
 8001e5e:	4413      	add	r3, r2
 8001e60:	83fb      	strh	r3, [r7, #30]
      break;
 8001e62:	e01b      	b.n	8001e9c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8001e64:	89fb      	ldrh	r3, [r7, #14]
 8001e66:	83fb      	strh	r3, [r7, #30]
      break;
 8001e68:	e018      	b.n	8001e9c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	b299      	uxth	r1, r3
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <BSP_LCD_DisplayStringAt+0x174>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4831      	ldr	r0, [pc, #196]	; (8001f3c <BSP_LCD_DisplayStringAt+0x178>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4403      	add	r3, r0
 8001e82:	3308      	adds	r3, #8
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	889b      	ldrh	r3, [r3, #4]
 8001e88:	fb11 f303 	smulbb	r3, r1, r3
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	89fb      	ldrh	r3, [r7, #14]
 8001e90:	4413      	add	r3, r2
 8001e92:	83fb      	strh	r3, [r7, #30]
      break;
 8001e94:	e002      	b.n	8001e9c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8001e96:	89fb      	ldrh	r3, [r7, #14]
 8001e98:	83fb      	strh	r3, [r7, #30]
      break;
 8001e9a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001e9c:	e01a      	b.n	8001ed4 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	89b9      	ldrh	r1, [r7, #12]
 8001ea4:	8bfb      	ldrh	r3, [r7, #30]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff36 	bl	8001d18 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <BSP_LCD_DisplayStringAt+0x174>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4922      	ldr	r1, [pc, #136]	; (8001f3c <BSP_LCD_DisplayStringAt+0x178>)
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	3308      	adds	r3, #8
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	889a      	ldrh	r2, [r3, #4]
 8001ec2:	8bfb      	ldrh	r3, [r7, #30]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
    i++;
 8001ece:	8bbb      	ldrh	r3, [r7, #28]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf14      	ite	ne
 8001edc:	2301      	movne	r3, #1
 8001ede:	2300      	moveq	r3, #0
 8001ee0:	b2dc      	uxtb	r4, r3
 8001ee2:	f7ff fe67 	bl	8001bb4 <BSP_LCD_GetXSize>
 8001ee6:	8bb9      	ldrh	r1, [r7, #28]
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <BSP_LCD_DisplayStringAt+0x174>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4d13      	ldr	r5, [pc, #76]	; (8001f3c <BSP_LCD_DisplayStringAt+0x178>)
 8001eee:	4613      	mov	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	442b      	add	r3, r5
 8001ef8:	3308      	adds	r3, #8
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	889b      	ldrh	r3, [r3, #4]
 8001efe:	fb03 f301 	mul.w	r3, r3, r1
 8001f02:	1ac3      	subs	r3, r0, r3
 8001f04:	b299      	uxth	r1, r3
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <BSP_LCD_DisplayStringAt+0x174>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	480c      	ldr	r0, [pc, #48]	; (8001f3c <BSP_LCD_DisplayStringAt+0x178>)
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4403      	add	r3, r0
 8001f16:	3308      	adds	r3, #8
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	889b      	ldrh	r3, [r3, #4]
 8001f1c:	4299      	cmp	r1, r3
 8001f1e:	bf2c      	ite	cs
 8001f20:	2301      	movcs	r3, #1
 8001f22:	2300      	movcc	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	4023      	ands	r3, r4
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1b7      	bne.n	8001e9e <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8001f2e:	bf00      	nop
 8001f30:	bf00      	nop
 8001f32:	3720      	adds	r7, #32
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bdb0      	pop	{r4, r5, r7, pc}
 8001f38:	200000b4 	.word	0x200000b4
 8001f3c:	200000b8 	.word	0x200000b8

08001f40 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001f40:	b5b0      	push	{r4, r5, r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	4603      	mov	r3, r0
 8001f48:	80fb      	strh	r3, [r7, #6]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	80bb      	strh	r3, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <BSP_LCD_DrawHLine+0x70>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a16      	ldr	r2, [pc, #88]	; (8001fb4 <BSP_LCD_DrawHLine+0x74>)
 8001f5c:	2134      	movs	r1, #52	; 0x34
 8001f5e:	fb01 f303 	mul.w	r3, r1, r3
 8001f62:	4413      	add	r3, r2
 8001f64:	335c      	adds	r3, #92	; 0x5c
 8001f66:	681c      	ldr	r4, [r3, #0]
 8001f68:	f7ff fe24 	bl	8001bb4 <BSP_LCD_GetXSize>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	88bb      	ldrh	r3, [r7, #4]
 8001f70:	fb03 f202 	mul.w	r2, r3, r2
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4423      	add	r3, r4
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <BSP_LCD_DrawHLine+0x70>)
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	68f9      	ldr	r1, [r7, #12]
 8001f84:	887c      	ldrh	r4, [r7, #2]
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <BSP_LCD_DrawHLine+0x70>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4d0b      	ldr	r5, [pc, #44]	; (8001fb8 <BSP_LCD_DrawHLine+0x78>)
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	442b      	add	r3, r5
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	4622      	mov	r2, r4
 8001fa2:	f000 fb2f 	bl	8002604 <FillBuffer>
}
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bdb0      	pop	{r4, r5, r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200000b4 	.word	0x200000b4
 8001fb4:	200001e0 	.word	0x200001e0
 8001fb8:	200000b8 	.word	0x200000b8

08001fbc <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80fb      	strh	r3, [r7, #6]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	80bb      	strh	r3, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001fd2:	4b18      	ldr	r3, [pc, #96]	; (8002034 <BSP_LCD_DrawVLine+0x78>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a18      	ldr	r2, [pc, #96]	; (8002038 <BSP_LCD_DrawVLine+0x7c>)
 8001fd8:	2134      	movs	r1, #52	; 0x34
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	335c      	adds	r3, #92	; 0x5c
 8001fe2:	681c      	ldr	r4, [r3, #0]
 8001fe4:	f7ff fde6 	bl	8001bb4 <BSP_LCD_GetXSize>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	88bb      	ldrh	r3, [r7, #4]
 8001fec:	fb03 f202 	mul.w	r2, r3, r2
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4423      	add	r3, r4
 8001ff8:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <BSP_LCD_DrawVLine+0x78>)
 8001ffc:	681c      	ldr	r4, [r3, #0]
 8001ffe:	68fd      	ldr	r5, [r7, #12]
 8002000:	887e      	ldrh	r6, [r7, #2]
 8002002:	f7ff fdd7 	bl	8001bb4 <BSP_LCD_GetXSize>
 8002006:	4603      	mov	r3, r0
 8002008:	1e59      	subs	r1, r3, #1
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <BSP_LCD_DrawVLine+0x78>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	480b      	ldr	r0, [pc, #44]	; (800203c <BSP_LCD_DrawVLine+0x80>)
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4403      	add	r3, r0
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	9100      	str	r1, [sp, #0]
 8002020:	4633      	mov	r3, r6
 8002022:	2201      	movs	r2, #1
 8002024:	4629      	mov	r1, r5
 8002026:	4620      	mov	r0, r4
 8002028:	f000 faec 	bl	8002604 <FillBuffer>
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002034:	200000b4 	.word	0x200000b4
 8002038:	200001e0 	.word	0x200001e0
 800203c:	200000b8 	.word	0x200000b8

08002040 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4604      	mov	r4, r0
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	4623      	mov	r3, r4
 8002050:	80fb      	strh	r3, [r7, #6]
 8002052:	4603      	mov	r3, r0
 8002054:	80bb      	strh	r3, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	807b      	strh	r3, [r7, #2]
 800205a:	4613      	mov	r3, r2
 800205c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800205e:	887a      	ldrh	r2, [r7, #2]
 8002060:	88b9      	ldrh	r1, [r7, #4]
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff6b 	bl	8001f40 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800206a:	88ba      	ldrh	r2, [r7, #4]
 800206c:	883b      	ldrh	r3, [r7, #0]
 800206e:	4413      	add	r3, r2
 8002070:	b299      	uxth	r1, r3
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff62 	bl	8001f40 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 800207c:	883a      	ldrh	r2, [r7, #0]
 800207e:	88b9      	ldrh	r1, [r7, #4]
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff9a 	bl	8001fbc <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8002088:	88fa      	ldrh	r2, [r7, #6]
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	4413      	add	r3, r2
 800208e:	b29b      	uxth	r3, r3
 8002090:	883a      	ldrh	r2, [r7, #0]
 8002092:	88b9      	ldrh	r1, [r7, #4]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff91 	bl	8001fbc <BSP_LCD_DrawVLine>
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd90      	pop	{r4, r7, pc}
	...

080020a4 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	80fb      	strh	r3, [r7, #6]
 80020ae:	460b      	mov	r3, r1
 80020b0:	80bb      	strh	r3, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80020b6:	887b      	ldrh	r3, [r7, #2]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	f1c3 0303 	rsb	r3, r3, #3
 80020be:	617b      	str	r3, [r7, #20]
  curx = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80020c4:	887b      	ldrh	r3, [r7, #2]
 80020c6:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 80020c8:	e0c7      	b.n	800225a <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	4413      	add	r3, r2
 80020d2:	b298      	uxth	r0, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	88ba      	ldrh	r2, [r7, #4]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	b299      	uxth	r1, r3
 80020de:	4b64      	ldr	r3, [pc, #400]	; (8002270 <BSP_LCD_DrawCircle+0x1cc>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4c64      	ldr	r4, [pc, #400]	; (8002274 <BSP_LCD_DrawCircle+0x1d0>)
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4423      	add	r3, r4
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	f000 f9a7 	bl	8002444 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	88fa      	ldrh	r2, [r7, #6]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	b298      	uxth	r0, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	b29b      	uxth	r3, r3
 8002104:	88ba      	ldrh	r2, [r7, #4]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	b299      	uxth	r1, r3
 800210a:	4b59      	ldr	r3, [pc, #356]	; (8002270 <BSP_LCD_DrawCircle+0x1cc>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4c59      	ldr	r4, [pc, #356]	; (8002274 <BSP_LCD_DrawCircle+0x1d0>)
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4423      	add	r3, r4
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	f000 f991 	bl	8002444 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	b29a      	uxth	r2, r3
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	4413      	add	r3, r2
 800212a:	b298      	uxth	r0, r3
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	b29b      	uxth	r3, r3
 8002130:	88ba      	ldrh	r2, [r7, #4]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	b299      	uxth	r1, r3
 8002136:	4b4e      	ldr	r3, [pc, #312]	; (8002270 <BSP_LCD_DrawCircle+0x1cc>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4c4e      	ldr	r4, [pc, #312]	; (8002274 <BSP_LCD_DrawCircle+0x1d0>)
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4423      	add	r3, r4
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	f000 f97b 	bl	8002444 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	b29b      	uxth	r3, r3
 8002152:	88fa      	ldrh	r2, [r7, #6]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	b298      	uxth	r0, r3
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	b29b      	uxth	r3, r3
 800215c:	88ba      	ldrh	r2, [r7, #4]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	b299      	uxth	r1, r3
 8002162:	4b43      	ldr	r3, [pc, #268]	; (8002270 <BSP_LCD_DrawCircle+0x1cc>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	4c43      	ldr	r4, [pc, #268]	; (8002274 <BSP_LCD_DrawCircle+0x1d0>)
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4423      	add	r3, r4
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	f000 f965 	bl	8002444 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	b29a      	uxth	r2, r3
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	4413      	add	r3, r2
 8002182:	b298      	uxth	r0, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	b29a      	uxth	r2, r3
 8002188:	88bb      	ldrh	r3, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	b299      	uxth	r1, r3
 800218e:	4b38      	ldr	r3, [pc, #224]	; (8002270 <BSP_LCD_DrawCircle+0x1cc>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4c38      	ldr	r4, [pc, #224]	; (8002274 <BSP_LCD_DrawCircle+0x1d0>)
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4423      	add	r3, r4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	f000 f94f 	bl	8002444 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	88fa      	ldrh	r2, [r7, #6]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	b298      	uxth	r0, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	88bb      	ldrh	r3, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	b299      	uxth	r1, r3
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <BSP_LCD_DrawCircle+0x1cc>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4c2d      	ldr	r4, [pc, #180]	; (8002274 <BSP_LCD_DrawCircle+0x1d0>)
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4423      	add	r3, r4
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	f000 f939 	bl	8002444 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	4413      	add	r3, r2
 80021da:	b298      	uxth	r0, r3
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	88bb      	ldrh	r3, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	b299      	uxth	r1, r3
 80021e6:	4b22      	ldr	r3, [pc, #136]	; (8002270 <BSP_LCD_DrawCircle+0x1cc>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4c22      	ldr	r4, [pc, #136]	; (8002274 <BSP_LCD_DrawCircle+0x1d0>)
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4423      	add	r3, r4
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	f000 f923 	bl	8002444 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	b29b      	uxth	r3, r3
 8002202:	88fa      	ldrh	r2, [r7, #6]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	b298      	uxth	r0, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	b29a      	uxth	r2, r3
 800220c:	88bb      	ldrh	r3, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	b299      	uxth	r1, r3
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <BSP_LCD_DrawCircle+0x1cc>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4c17      	ldr	r4, [pc, #92]	; (8002274 <BSP_LCD_DrawCircle+0x1d0>)
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4423      	add	r3, r4
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	f000 f90d 	bl	8002444 <BSP_LCD_DrawPixel>

    if (d < 0)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	da06      	bge.n	800223e <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	009a      	lsls	r2, r3, #2
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	4413      	add	r3, r2
 8002238:	3306      	adds	r3, #6
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	e00a      	b.n	8002254 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	009a      	lsls	r2, r3, #2
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	4413      	add	r3, r2
 800224a:	330a      	adds	r3, #10
 800224c:	617b      	str	r3, [r7, #20]
      cury--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3b01      	subs	r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	3301      	adds	r3, #1
 8002258:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	429a      	cmp	r2, r3
 8002260:	f67f af33 	bls.w	80020ca <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	371c      	adds	r7, #28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd90      	pop	{r4, r7, pc}
 800226e:	bf00      	nop
 8002270:	200000b4 	.word	0x200000b4
 8002274:	200000b8 	.word	0x200000b8

08002278 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <BSP_LCD_DisplayOn+0x1c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002286:	4b03      	ldr	r3, [pc, #12]	; (8002294 <BSP_LCD_DisplayOn+0x1c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4798      	blx	r3
  }
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200003d0 	.word	0x200003d0

08002298 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08e      	sub	sp, #56	; 0x38
 800229c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	623b      	str	r3, [r7, #32]
 80022a2:	4b61      	ldr	r3, [pc, #388]	; (8002428 <BSP_LCD_MspInit+0x190>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	4a60      	ldr	r2, [pc, #384]	; (8002428 <BSP_LCD_MspInit+0x190>)
 80022a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022ac:	6453      	str	r3, [r2, #68]	; 0x44
 80022ae:	4b5e      	ldr	r3, [pc, #376]	; (8002428 <BSP_LCD_MspInit+0x190>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022b6:	623b      	str	r3, [r7, #32]
 80022b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	4b5a      	ldr	r3, [pc, #360]	; (8002428 <BSP_LCD_MspInit+0x190>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a59      	ldr	r2, [pc, #356]	; (8002428 <BSP_LCD_MspInit+0x190>)
 80022c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b57      	ldr	r3, [pc, #348]	; (8002428 <BSP_LCD_MspInit+0x190>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
 80022da:	4b53      	ldr	r3, [pc, #332]	; (8002428 <BSP_LCD_MspInit+0x190>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a52      	ldr	r2, [pc, #328]	; (8002428 <BSP_LCD_MspInit+0x190>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b50      	ldr	r3, [pc, #320]	; (8002428 <BSP_LCD_MspInit+0x190>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <BSP_LCD_MspInit+0x190>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a4b      	ldr	r2, [pc, #300]	; (8002428 <BSP_LCD_MspInit+0x190>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <BSP_LCD_MspInit+0x190>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	4b45      	ldr	r3, [pc, #276]	; (8002428 <BSP_LCD_MspInit+0x190>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a44      	ldr	r2, [pc, #272]	; (8002428 <BSP_LCD_MspInit+0x190>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b42      	ldr	r3, [pc, #264]	; (8002428 <BSP_LCD_MspInit+0x190>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b3e      	ldr	r3, [pc, #248]	; (8002428 <BSP_LCD_MspInit+0x190>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a3d      	ldr	r2, [pc, #244]	; (8002428 <BSP_LCD_MspInit+0x190>)
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <BSP_LCD_MspInit+0x190>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	4b37      	ldr	r3, [pc, #220]	; (8002428 <BSP_LCD_MspInit+0x190>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a36      	ldr	r2, [pc, #216]	; (8002428 <BSP_LCD_MspInit+0x190>)
 8002350:	f043 0320 	orr.w	r3, r3, #32
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b34      	ldr	r3, [pc, #208]	; (8002428 <BSP_LCD_MspInit+0x190>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	4b30      	ldr	r3, [pc, #192]	; (8002428 <BSP_LCD_MspInit+0x190>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <BSP_LCD_MspInit+0x190>)
 800236c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <BSP_LCD_MspInit+0x190>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800237e:	f641 0358 	movw	r3, #6232	; 0x1858
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800238c:	2302      	movs	r3, #2
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002390:	230e      	movs	r3, #14
 8002392:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002398:	4619      	mov	r1, r3
 800239a:	4824      	ldr	r0, [pc, #144]	; (800242c <BSP_LCD_MspInit+0x194>)
 800239c:	f001 f988 	bl	80036b0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80023a0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80023a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023aa:	4619      	mov	r1, r3
 80023ac:	4820      	ldr	r0, [pc, #128]	; (8002430 <BSP_LCD_MspInit+0x198>)
 80023ae:	f001 f97f 	bl	80036b0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80023b2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80023b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023bc:	4619      	mov	r1, r3
 80023be:	481d      	ldr	r0, [pc, #116]	; (8002434 <BSP_LCD_MspInit+0x19c>)
 80023c0:	f001 f976 	bl	80036b0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80023c4:	2348      	movs	r3, #72	; 0x48
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	4619      	mov	r1, r3
 80023ce:	481a      	ldr	r0, [pc, #104]	; (8002438 <BSP_LCD_MspInit+0x1a0>)
 80023d0:	f001 f96e 	bl	80036b0 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80023d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80023da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023de:	4619      	mov	r1, r3
 80023e0:	4816      	ldr	r0, [pc, #88]	; (800243c <BSP_LCD_MspInit+0x1a4>)
 80023e2:	f001 f965 	bl	80036b0 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80023e6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80023ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f0:	4619      	mov	r1, r3
 80023f2:	4813      	ldr	r0, [pc, #76]	; (8002440 <BSP_LCD_MspInit+0x1a8>)
 80023f4:	f001 f95c 	bl	80036b0 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80023f8:	2303      	movs	r3, #3
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80023fc:	2309      	movs	r3, #9
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002404:	4619      	mov	r1, r3
 8002406:	480a      	ldr	r0, [pc, #40]	; (8002430 <BSP_LCD_MspInit+0x198>)
 8002408:	f001 f952 	bl	80036b0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800240c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002416:	4619      	mov	r1, r3
 8002418:	4809      	ldr	r0, [pc, #36]	; (8002440 <BSP_LCD_MspInit+0x1a8>)
 800241a:	f001 f949 	bl	80036b0 <HAL_GPIO_Init>
}
 800241e:	bf00      	nop
 8002420:	3738      	adds	r7, #56	; 0x38
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	40020000 	.word	0x40020000
 8002430:	40020400 	.word	0x40020400
 8002434:	40020800 	.word	0x40020800
 8002438:	40020c00 	.word	0x40020c00
 800243c:	40021400 	.word	0x40021400
 8002440:	40021800 	.word	0x40021800

08002444 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002444:	b5b0      	push	{r4, r5, r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	603a      	str	r2, [r7, #0]
 800244e:	80fb      	strh	r3, [r7, #6]
 8002450:	460b      	mov	r3, r1
 8002452:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <BSP_LCD_DrawPixel+0x44>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0c      	ldr	r2, [pc, #48]	; (800248c <BSP_LCD_DrawPixel+0x48>)
 800245a:	2134      	movs	r1, #52	; 0x34
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	4413      	add	r3, r2
 8002462:	335c      	adds	r3, #92	; 0x5c
 8002464:	681c      	ldr	r4, [r3, #0]
 8002466:	88bd      	ldrh	r5, [r7, #4]
 8002468:	f7ff fba4 	bl	8001bb4 <BSP_LCD_GetXSize>
 800246c:	4603      	mov	r3, r0
 800246e:	fb03 f205 	mul.w	r2, r3, r5
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4423      	add	r3, r4
 800247a:	461a      	mov	r2, r3
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6013      	str	r3, [r2, #0]
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bdb0      	pop	{r4, r5, r7, pc}
 8002488:	200000b4 	.word	0x200000b4
 800248c:	200001e0 	.word	0x200001e0

08002490 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	603a      	str	r2, [r7, #0]
 800249a:	80fb      	strh	r3, [r7, #6]
 800249c:	460b      	mov	r3, r1
 800249e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	2300      	movs	r3, #0
 80024a6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80024ac:	4b53      	ldr	r3, [pc, #332]	; (80025fc <DrawChar+0x16c>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4953      	ldr	r1, [pc, #332]	; (8002600 <DrawChar+0x170>)
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	3308      	adds	r3, #8
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	88db      	ldrh	r3, [r3, #6]
 80024c2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80024c4:	4b4d      	ldr	r3, [pc, #308]	; (80025fc <DrawChar+0x16c>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	494d      	ldr	r1, [pc, #308]	; (8002600 <DrawChar+0x170>)
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	3308      	adds	r3, #8
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	889b      	ldrh	r3, [r3, #4]
 80024da:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80024dc:	8a3b      	ldrh	r3, [r7, #16]
 80024de:	3307      	adds	r3, #7
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	da00      	bge.n	80024e6 <DrawChar+0x56>
 80024e4:	3307      	adds	r3, #7
 80024e6:	10db      	asrs	r3, r3, #3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	8a3b      	ldrh	r3, [r7, #16]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	e076      	b.n	80025ea <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80024fc:	8a3b      	ldrh	r3, [r7, #16]
 80024fe:	3307      	adds	r3, #7
 8002500:	2b00      	cmp	r3, #0
 8002502:	da00      	bge.n	8002506 <DrawChar+0x76>
 8002504:	3307      	adds	r3, #7
 8002506:	10db      	asrs	r3, r3, #3
 8002508:	461a      	mov	r2, r3
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fb03 f302 	mul.w	r3, r3, r2
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	4413      	add	r3, r2
 8002514:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002516:	8a3b      	ldrh	r3, [r7, #16]
 8002518:	3307      	adds	r3, #7
 800251a:	2b00      	cmp	r3, #0
 800251c:	da00      	bge.n	8002520 <DrawChar+0x90>
 800251e:	3307      	adds	r3, #7
 8002520:	10db      	asrs	r3, r3, #3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d002      	beq.n	800252c <DrawChar+0x9c>
 8002526:	2b02      	cmp	r3, #2
 8002528:	d004      	beq.n	8002534 <DrawChar+0xa4>
 800252a:	e00c      	b.n	8002546 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	617b      	str	r3, [r7, #20]
      break;
 8002532:	e016      	b.n	8002562 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	3201      	adds	r2, #1
 800253e:	7812      	ldrb	r2, [r2, #0]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
      break;
 8002544:	e00d      	b.n	8002562 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	041a      	lsls	r2, r3, #16
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	3301      	adds	r3, #1
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	4313      	orrs	r3, r2
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	3202      	adds	r2, #2
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
      break;
 8002560:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	e036      	b.n	80025d6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002568:	8a3a      	ldrh	r2, [r7, #16]
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	1ad2      	subs	r2, r2, r3
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	4413      	add	r3, r2
 8002572:	3b01      	subs	r3, #1
 8002574:	2201      	movs	r2, #1
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	461a      	mov	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d012      	beq.n	80025aa <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	b29a      	uxth	r2, r3
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	4413      	add	r3, r2
 800258c:	b298      	uxth	r0, r3
 800258e:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <DrawChar+0x16c>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	491b      	ldr	r1, [pc, #108]	; (8002600 <DrawChar+0x170>)
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	88bb      	ldrh	r3, [r7, #4]
 80025a2:	4619      	mov	r1, r3
 80025a4:	f7ff ff4e 	bl	8002444 <BSP_LCD_DrawPixel>
 80025a8:	e012      	b.n	80025d0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	4413      	add	r3, r2
 80025b2:	b298      	uxth	r0, r3
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <DrawChar+0x16c>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4911      	ldr	r1, [pc, #68]	; (8002600 <DrawChar+0x170>)
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3304      	adds	r3, #4
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	88bb      	ldrh	r3, [r7, #4]
 80025ca:	4619      	mov	r1, r3
 80025cc:	f7ff ff3a 	bl	8002444 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	3301      	adds	r3, #1
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	8a3b      	ldrh	r3, [r7, #16]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d3c4      	bcc.n	8002568 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80025de:	88bb      	ldrh	r3, [r7, #4]
 80025e0:	3301      	adds	r3, #1
 80025e2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	3301      	adds	r3, #1
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	8a7b      	ldrh	r3, [r7, #18]
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d384      	bcc.n	80024fc <DrawChar+0x6c>
  }
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	200000b4 	.word	0x200000b4
 8002600:	200000b8 	.word	0x200000b8

08002604 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002612:	4b16      	ldr	r3, [pc, #88]	; (800266c <FillBuffer+0x68>)
 8002614:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002618:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800261a:	4b14      	ldr	r3, [pc, #80]	; (800266c <FillBuffer+0x68>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002620:	4a12      	ldr	r2, [pc, #72]	; (800266c <FillBuffer+0x68>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <FillBuffer+0x68>)
 8002628:	4a11      	ldr	r2, [pc, #68]	; (8002670 <FillBuffer+0x6c>)
 800262a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800262c:	480f      	ldr	r0, [pc, #60]	; (800266c <FillBuffer+0x68>)
 800262e:	f000 fca3 	bl	8002f78 <HAL_DMA2D_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d115      	bne.n	8002664 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002638:	68f9      	ldr	r1, [r7, #12]
 800263a:	480c      	ldr	r0, [pc, #48]	; (800266c <FillBuffer+0x68>)
 800263c:	f000 ff0a 	bl	8003454 <HAL_DMA2D_ConfigLayer>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10e      	bne.n	8002664 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69f9      	ldr	r1, [r7, #28]
 8002650:	4806      	ldr	r0, [pc, #24]	; (800266c <FillBuffer+0x68>)
 8002652:	f000 fcda 	bl	800300a <HAL_DMA2D_Start>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d103      	bne.n	8002664 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800265c:	210a      	movs	r1, #10
 800265e:	4803      	ldr	r0, [pc, #12]	; (800266c <FillBuffer+0x68>)
 8002660:	f000 fcfe 	bl	8003060 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000074 	.word	0x20000074
 8002670:	4002b000 	.word	0x4002b000

08002674 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* TRCD: 20ns => 2x11.11ns */
  /* Row addressing: [7:0] */
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&hsdram1, (void *)NULL);
 8002678:	2100      	movs	r1, #0
 800267a:	4805      	ldr	r0, [pc, #20]	; (8002690 <BSP_SDRAM_Init+0x1c>)
 800267c:	f000 f86a 	bl	8002754 <BSP_SDRAM_MspInit>
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002680:	f240 506a 	movw	r0, #1386	; 0x56a
 8002684:	f000 f806 	bl	8002694 <BSP_SDRAM_Initialization_sequence>
  
  return SDRAM_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000354 	.word	0x20000354

08002694 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80026a0:	4b2a      	ldr	r3, [pc, #168]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80026a6:	4b29      	ldr	r3, [pc, #164]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026a8:	2208      	movs	r2, #8
 80026aa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80026b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026bc:	4923      	ldr	r1, [pc, #140]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026be:	4824      	ldr	r0, [pc, #144]	; (8002750 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80026c0:	f002 fe88 	bl	80053d4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80026c4:	2001      	movs	r0, #1
 80026c6:	f000 f993 	bl	80029f0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026cc:	2202      	movs	r2, #2
 80026ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80026d0:	4b1e      	ldr	r3, [pc, #120]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026d2:	2208      	movs	r2, #8
 80026d4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026d8:	2201      	movs	r2, #1
 80026da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80026e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026e6:	4919      	ldr	r1, [pc, #100]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026e8:	4819      	ldr	r0, [pc, #100]	; (8002750 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80026ea:	f002 fe73 	bl	80053d4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80026ee:	4b17      	ldr	r3, [pc, #92]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026f0:	2203      	movs	r2, #3
 80026f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026f6:	2208      	movs	r2, #8
 80026f8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80026fa:	4b14      	ldr	r3, [pc, #80]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026fc:	2204      	movs	r2, #4
 80026fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800270a:	4910      	ldr	r1, [pc, #64]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800270c:	4810      	ldr	r0, [pc, #64]	; (8002750 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800270e:	f002 fe61 	bl	80053d4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002712:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002716:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800271a:	2204      	movs	r2, #4
 800271c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002720:	2208      	movs	r2, #8
 8002722:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002726:	2201      	movs	r2, #1
 8002728:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a07      	ldr	r2, [pc, #28]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800272e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002734:	4905      	ldr	r1, [pc, #20]	; (800274c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002736:	4806      	ldr	r0, [pc, #24]	; (8002750 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002738:	f002 fe4c 	bl	80053d4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4804      	ldr	r0, [pc, #16]	; (8002750 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002740:	f002 fe73 	bl	800542a <HAL_SDRAM_ProgramRefreshRate>
}
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200000c4 	.word	0x200000c4
 8002750:	20000354 	.word	0x20000354

08002754 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b090      	sub	sp, #64	; 0x40
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80ec 	beq.w	800293e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
 800276a:	4b77      	ldr	r3, [pc, #476]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	4a76      	ldr	r2, [pc, #472]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6393      	str	r3, [r2, #56]	; 0x38
 8002776:	4b74      	ldr	r3, [pc, #464]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	4b70      	ldr	r3, [pc, #448]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a6f      	ldr	r2, [pc, #444]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 800278c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b6d      	ldr	r3, [pc, #436]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	623b      	str	r3, [r7, #32]
 80027a2:	4b69      	ldr	r3, [pc, #420]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a68      	ldr	r2, [pc, #416]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b66      	ldr	r3, [pc, #408]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	623b      	str	r3, [r7, #32]
 80027b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	4b62      	ldr	r3, [pc, #392]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a61      	ldr	r2, [pc, #388]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b5f      	ldr	r3, [pc, #380]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	4b5b      	ldr	r3, [pc, #364]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a5a      	ldr	r2, [pc, #360]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b58      	ldr	r3, [pc, #352]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	61bb      	str	r3, [r7, #24]
 80027f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	4b54      	ldr	r3, [pc, #336]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	4a53      	ldr	r2, [pc, #332]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 80027fc:	f043 0310 	orr.w	r3, r3, #16
 8002800:	6313      	str	r3, [r2, #48]	; 0x30
 8002802:	4b51      	ldr	r3, [pc, #324]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	4b4d      	ldr	r3, [pc, #308]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a4c      	ldr	r2, [pc, #304]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 8002818:	f043 0320 	orr.w	r3, r3, #32
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b4a      	ldr	r3, [pc, #296]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b46      	ldr	r3, [pc, #280]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a45      	ldr	r2, [pc, #276]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 8002834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b43      	ldr	r3, [pc, #268]	; (8002948 <BSP_SDRAM_MspInit+0x1f4>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002846:	2302      	movs	r3, #2
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800284a:	2302      	movs	r3, #2
 800284c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002852:	230c      	movs	r3, #12
 8002854:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002856:	2360      	movs	r3, #96	; 0x60
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800285a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800285e:	4619      	mov	r1, r3
 8002860:	483a      	ldr	r0, [pc, #232]	; (800294c <BSP_SDRAM_MspInit+0x1f8>)
 8002862:	f000 ff25 	bl	80036b0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002866:	2301      	movs	r3, #1
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800286a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800286e:	4619      	mov	r1, r3
 8002870:	4837      	ldr	r0, [pc, #220]	; (8002950 <BSP_SDRAM_MspInit+0x1fc>)
 8002872:	f000 ff1d 	bl	80036b0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002876:	f24c 7303 	movw	r3, #50947	; 0xc703
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800287c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002880:	4619      	mov	r1, r3
 8002882:	4834      	ldr	r0, [pc, #208]	; (8002954 <BSP_SDRAM_MspInit+0x200>)
 8002884:	f000 ff14 	bl	80036b0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002888:	f64f 7383 	movw	r3, #65411	; 0xff83
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800288e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002892:	4619      	mov	r1, r3
 8002894:	4830      	ldr	r0, [pc, #192]	; (8002958 <BSP_SDRAM_MspInit+0x204>)
 8002896:	f000 ff0b 	bl	80036b0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800289a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80028a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028a4:	4619      	mov	r1, r3
 80028a6:	482d      	ldr	r0, [pc, #180]	; (800295c <BSP_SDRAM_MspInit+0x208>)
 80028a8:	f000 ff02 	bl	80036b0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80028ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80028b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b6:	4619      	mov	r1, r3
 80028b8:	4829      	ldr	r0, [pc, #164]	; (8002960 <BSP_SDRAM_MspInit+0x20c>)
 80028ba:	f000 fef9 	bl	80036b0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80028be:	4b29      	ldr	r3, [pc, #164]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80028c4:	4b27      	ldr	r3, [pc, #156]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80028ca:	4b26      	ldr	r3, [pc, #152]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 80028cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80028d2:	4b24      	ldr	r3, [pc, #144]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 80028d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028da:	4b22      	ldr	r3, [pc, #136]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 80028dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028e0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 80028e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028e8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80028ea:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80028f0:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 80028f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028f6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80028fe:	4b19      	ldr	r3, [pc, #100]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 8002900:	2203      	movs	r2, #3
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002904:	4b17      	ldr	r3, [pc, #92]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 8002906:	2200      	movs	r2, #0
 8002908:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002910:	4b14      	ldr	r3, [pc, #80]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 8002912:	4a15      	ldr	r2, [pc, #84]	; (8002968 <BSP_SDRAM_MspInit+0x214>)
 8002914:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a12      	ldr	r2, [pc, #72]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
 800291c:	4a11      	ldr	r2, [pc, #68]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002922:	4810      	ldr	r0, [pc, #64]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 8002924:	f000 fa18 	bl	8002d58 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002928:	480e      	ldr	r0, [pc, #56]	; (8002964 <BSP_SDRAM_MspInit+0x210>)
 800292a:	f000 f967 	bl	8002bfc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	210f      	movs	r1, #15
 8002932:	2038      	movs	r0, #56	; 0x38
 8002934:	f000 f938 	bl	8002ba8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002938:	2038      	movs	r0, #56	; 0x38
 800293a:	f000 f951 	bl	8002be0 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800293e:	bf00      	nop
 8002940:	3740      	adds	r7, #64	; 0x40
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	40020400 	.word	0x40020400
 8002950:	40020800 	.word	0x40020800
 8002954:	40020c00 	.word	0x40020c00
 8002958:	40021000 	.word	0x40021000
 800295c:	40021400 	.word	0x40021400
 8002960:	40021800 	.word	0x40021800
 8002964:	200000d4 	.word	0x200000d4
 8002968:	40026410 	.word	0x40026410

0800296c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002970:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <HAL_Init+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <HAL_Init+0x40>)
 8002976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_Init+0x40>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <HAL_Init+0x40>)
 8002982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <HAL_Init+0x40>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a07      	ldr	r2, [pc, #28]	; (80029ac <HAL_Init+0x40>)
 800298e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002994:	2003      	movs	r0, #3
 8002996:	f000 f8fc 	bl	8002b92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299a:	2000      	movs	r0, #0
 800299c:	f7fe fcec 	bl	8001378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a0:	f7fe f9ae 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40023c00 	.word	0x40023c00

080029b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_IncTick+0x20>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_IncTick+0x24>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	4a04      	ldr	r2, [pc, #16]	; (80029d4 <HAL_IncTick+0x24>)
 80029c2:	6013      	str	r3, [r2, #0]
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	2000004c 	.word	0x2000004c
 80029d4:	200003d4 	.word	0x200003d4

080029d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return uwTick;
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <HAL_GetTick+0x14>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	200003d4 	.word	0x200003d4

080029f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f8:	f7ff ffee 	bl	80029d8 <HAL_GetTick>
 80029fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d005      	beq.n	8002a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <HAL_Delay+0x44>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a16:	bf00      	nop
 8002a18:	f7ff ffde 	bl	80029d8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d8f7      	bhi.n	8002a18 <HAL_Delay+0x28>
  {
  }
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	2000004c 	.word	0x2000004c

08002a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <__NVIC_SetPriorityGrouping+0x44>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a54:	4013      	ands	r3, r2
 8002a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6a:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <__NVIC_SetPriorityGrouping+0x44>)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	60d3      	str	r3, [r2, #12]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <__NVIC_GetPriorityGrouping+0x18>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	f003 0307 	and.w	r3, r3, #7
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	db0b      	blt.n	8002ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	f003 021f 	and.w	r2, r3, #31
 8002ab4:	4907      	ldr	r1, [pc, #28]	; (8002ad4 <__NVIC_EnableIRQ+0x38>)
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	2001      	movs	r0, #1
 8002abe:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000e100 	.word	0xe000e100

08002ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	6039      	str	r1, [r7, #0]
 8002ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	db0a      	blt.n	8002b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	490c      	ldr	r1, [pc, #48]	; (8002b24 <__NVIC_SetPriority+0x4c>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	0112      	lsls	r2, r2, #4
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	440b      	add	r3, r1
 8002afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b00:	e00a      	b.n	8002b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4908      	ldr	r1, [pc, #32]	; (8002b28 <__NVIC_SetPriority+0x50>)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	3b04      	subs	r3, #4
 8002b10:	0112      	lsls	r2, r2, #4
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	440b      	add	r3, r1
 8002b16:	761a      	strb	r2, [r3, #24]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000e100 	.word	0xe000e100
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b089      	sub	sp, #36	; 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f1c3 0307 	rsb	r3, r3, #7
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	bf28      	it	cs
 8002b4a:	2304      	movcs	r3, #4
 8002b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3304      	adds	r3, #4
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d902      	bls.n	8002b5c <NVIC_EncodePriority+0x30>
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3b03      	subs	r3, #3
 8002b5a:	e000      	b.n	8002b5e <NVIC_EncodePriority+0x32>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	401a      	ands	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	43d9      	mvns	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	4313      	orrs	r3, r2
         );
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3724      	adds	r7, #36	; 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ff4c 	bl	8002a38 <__NVIC_SetPriorityGrouping>
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bba:	f7ff ff61 	bl	8002a80 <__NVIC_GetPriorityGrouping>
 8002bbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	6978      	ldr	r0, [r7, #20]
 8002bc6:	f7ff ffb1 	bl	8002b2c <NVIC_EncodePriority>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ff80 	bl	8002ad8 <__NVIC_SetPriority>
}
 8002bd8:	bf00      	nop
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff ff54 	bl	8002a9c <__NVIC_EnableIRQ>
}
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c08:	f7ff fee6 	bl	80029d8 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e099      	b.n	8002d4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c38:	e00f      	b.n	8002c5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c3a:	f7ff fecd 	bl	80029d8 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d908      	bls.n	8002c5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2203      	movs	r2, #3
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e078      	b.n	8002d4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1e8      	bne.n	8002c3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4b38      	ldr	r3, [pc, #224]	; (8002d54 <HAL_DMA_Init+0x158>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d107      	bne.n	8002cc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f023 0307 	bic.w	r3, r3, #7
 8002cda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d117      	bne.n	8002d1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00e      	beq.n	8002d1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f8bd 	bl	8002e80 <DMA_CheckFifoParam>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2240      	movs	r2, #64	; 0x40
 8002d10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e016      	b.n	8002d4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f874 	bl	8002e14 <DMA_CalcBaseAndBitshift>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d34:	223f      	movs	r2, #63	; 0x3f
 8002d36:	409a      	lsls	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	f010803f 	.word	0xf010803f

08002d58 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e050      	b.n	8002e0c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d101      	bne.n	8002d7a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002d76:	2302      	movs	r3, #2
 8002d78:	e048      	b.n	8002e0c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2200      	movs	r2, #0
 8002da8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2200      	movs	r2, #0
 8002db0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2221      	movs	r2, #33	; 0x21
 8002db8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f82a 	bl	8002e14 <DMA_CalcBaseAndBitshift>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	223f      	movs	r2, #63	; 0x3f
 8002dee:	409a      	lsls	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	3b10      	subs	r3, #16
 8002e24:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <DMA_CalcBaseAndBitshift+0x64>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e2e:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <DMA_CalcBaseAndBitshift+0x68>)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d909      	bls.n	8002e56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	1d1a      	adds	r2, r3, #4
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	659a      	str	r2, [r3, #88]	; 0x58
 8002e54:	e007      	b.n	8002e66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e5e:	f023 0303 	bic.w	r3, r3, #3
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	aaaaaaab 	.word	0xaaaaaaab
 8002e7c:	08007340 	.word	0x08007340

08002e80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d11f      	bne.n	8002eda <DMA_CheckFifoParam+0x5a>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d856      	bhi.n	8002f4e <DMA_CheckFifoParam+0xce>
 8002ea0:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <DMA_CheckFifoParam+0x28>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002eb9 	.word	0x08002eb9
 8002eac:	08002ecb 	.word	0x08002ecb
 8002eb0:	08002eb9 	.word	0x08002eb9
 8002eb4:	08002f4f 	.word	0x08002f4f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d046      	beq.n	8002f52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec8:	e043      	b.n	8002f52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ed2:	d140      	bne.n	8002f56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed8:	e03d      	b.n	8002f56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee2:	d121      	bne.n	8002f28 <DMA_CheckFifoParam+0xa8>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d837      	bhi.n	8002f5a <DMA_CheckFifoParam+0xda>
 8002eea:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <DMA_CheckFifoParam+0x70>)
 8002eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef0:	08002f01 	.word	0x08002f01
 8002ef4:	08002f07 	.word	0x08002f07
 8002ef8:	08002f01 	.word	0x08002f01
 8002efc:	08002f19 	.word	0x08002f19
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      break;
 8002f04:	e030      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d025      	beq.n	8002f5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f16:	e022      	b.n	8002f5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f20:	d11f      	bne.n	8002f62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f26:	e01c      	b.n	8002f62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d903      	bls.n	8002f36 <DMA_CheckFifoParam+0xb6>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d003      	beq.n	8002f3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f34:	e018      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3a:	e015      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00e      	beq.n	8002f66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f4c:	e00b      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      break;
 8002f4e:	bf00      	nop
 8002f50:	e00a      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;
 8002f52:	bf00      	nop
 8002f54:	e008      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;
 8002f56:	bf00      	nop
 8002f58:	e006      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e004      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e002      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f62:	bf00      	nop
 8002f64:	e000      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;
 8002f66:	bf00      	nop
    }
  } 
  
  return status; 
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop

08002f78 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e03b      	b.n	8003002 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd fed6 	bl	8000d50 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc8:	f023 0107 	bic.w	r1, r3, #7
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002fe2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68d1      	ldr	r1, [r2, #12]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b086      	sub	sp, #24
 800300e:	af02      	add	r7, sp, #8
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_DMA2D_Start+0x1c>
 8003022:	2302      	movs	r3, #2
 8003024:	e018      	b.n	8003058 <HAL_DMA2D_Start+0x4e>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2202      	movs	r2, #2
 8003032:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fa99 	bl	8003578 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d056      	beq.n	800312a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800307c:	f7ff fcac 	bl	80029d8 <HAL_GetTick>
 8003080:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003082:	e04b      	b.n	800311c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003092:	2b00      	cmp	r3, #0
 8003094:	d023      	beq.n	80030de <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	f043 0202 	orr.w	r2, r3, #2
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	f043 0201 	orr.w	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2221      	movs	r2, #33	; 0x21
 80030c8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2204      	movs	r2, #4
 80030ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e0a5      	b.n	800322a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d01a      	beq.n	800311c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030e6:	f7ff fc77 	bl	80029d8 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <HAL_DMA2D_PollForTransfer+0x9c>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10f      	bne.n	800311c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2203      	movs	r2, #3
 800310c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e086      	b.n	800322a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0ac      	beq.n	8003084 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d061      	beq.n	8003210 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800314c:	f7ff fc44 	bl	80029d8 <HAL_GetTick>
 8003150:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003152:	e056      	b.n	8003202 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003162:	2b00      	cmp	r3, #0
 8003164:	d02e      	beq.n	80031c4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	f043 0204 	orr.w	r2, r3, #4
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	f043 0202 	orr.w	r2, r3, #2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a0:	f043 0201 	orr.w	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2229      	movs	r2, #41	; 0x29
 80031ae:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2204      	movs	r2, #4
 80031b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e032      	b.n	800322a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ca:	d01a      	beq.n	8003202 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031cc:	f7ff fc04 	bl	80029d8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d302      	bcc.n	80031e2 <HAL_DMA2D_PollForTransfer+0x182>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10f      	bne.n	8003202 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	f043 0220 	orr.w	r2, r3, #32
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2203      	movs	r2, #3
 80031f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e013      	b.n	800322a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0a1      	beq.n	8003154 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2212      	movs	r2, #18
 8003216:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d026      	beq.n	80032a2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d021      	beq.n	80032a2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800326c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	f043 0201 	orr.w	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2201      	movs	r2, #1
 8003280:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2204      	movs	r2, #4
 8003286:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d026      	beq.n	80032fa <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d021      	beq.n	80032fa <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032c4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2220      	movs	r2, #32
 80032cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d2:	f043 0202 	orr.w	r2, r3, #2
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2204      	movs	r2, #4
 80032de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d026      	beq.n	8003352 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330a:	2b00      	cmp	r3, #0
 800330c:	d021      	beq.n	8003352 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800331c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2208      	movs	r2, #8
 8003324:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	f043 0204 	orr.w	r2, r3, #4
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2204      	movs	r2, #4
 8003336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d013      	beq.n	8003384 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00e      	beq.n	8003384 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003374:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2204      	movs	r2, #4
 800337c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f853 	bl	800342a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d024      	beq.n	80033d8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01f      	beq.n	80033d8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033a6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2202      	movs	r2, #2
 80033ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d01f      	beq.n	8003422 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01a      	beq.n	8003422 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033fa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2210      	movs	r2, #16
 8003402:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f80e 	bl	800343e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_DMA2D_ConfigLayer+0x20>
 8003470:	2302      	movs	r3, #2
 8003472:	e079      	b.n	8003568 <HAL_DMA2D_ConfigLayer+0x114>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	3318      	adds	r3, #24
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	041b      	lsls	r3, r3, #16
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800349e:	4b35      	ldr	r3, [pc, #212]	; (8003574 <HAL_DMA2D_ConfigLayer+0x120>)
 80034a0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b0a      	cmp	r3, #10
 80034a8:	d003      	beq.n	80034b2 <HAL_DMA2D_ConfigLayer+0x5e>
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b09      	cmp	r3, #9
 80034b0:	d107      	bne.n	80034c2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	e005      	b.n	80034ce <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	061b      	lsls	r3, r3, #24
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d120      	bne.n	8003516 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	43db      	mvns	r3, r3
 80034de:	ea02 0103 	and.w	r1, r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b0a      	cmp	r3, #10
 80034fc:	d003      	beq.n	8003506 <HAL_DMA2D_ConfigLayer+0xb2>
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b09      	cmp	r3, #9
 8003504:	d127      	bne.n	8003556 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003512:	629a      	str	r2, [r3, #40]	; 0x28
 8003514:	e01f      	b.n	8003556 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	43db      	mvns	r3, r3
 8003520:	ea02 0103 	and.w	r1, r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	430a      	orrs	r2, r1
 800352c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b0a      	cmp	r3, #10
 800353e:	d003      	beq.n	8003548 <HAL_DMA2D_ConfigLayer+0xf4>
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b09      	cmp	r3, #9
 8003546:	d106      	bne.n	8003556 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003554:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	ff03000f 	.word	0xff03000f

08003578 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003578:	b480      	push	{r7}
 800357a:	b08b      	sub	sp, #44	; 0x2c
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	041a      	lsls	r2, r3, #16
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	431a      	orrs	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035b0:	d174      	bne.n	800369c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80035b8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035c0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80035c8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d108      	bne.n	80035ea <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	431a      	orrs	r2, r3
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
 80035e8:	e053      	b.n	8003692 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d106      	bne.n	8003600 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
 80035fe:	e048      	b.n	8003692 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d111      	bne.n	800362c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	0cdb      	lsrs	r3, r3, #19
 800360c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	0a9b      	lsrs	r3, r3, #10
 8003612:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	08db      	lsrs	r3, r3, #3
 8003618:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	02db      	lsls	r3, r3, #11
 8003622:	4313      	orrs	r3, r2
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
 800362a:	e032      	b.n	8003692 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d117      	bne.n	8003664 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	0fdb      	lsrs	r3, r3, #31
 8003638:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	0cdb      	lsrs	r3, r3, #19
 800363e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	0adb      	lsrs	r3, r3, #11
 8003644:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	08db      	lsrs	r3, r3, #3
 800364a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	029b      	lsls	r3, r3, #10
 8003654:	431a      	orrs	r2, r3
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	03db      	lsls	r3, r3, #15
 800365a:	4313      	orrs	r3, r2
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
 8003662:	e016      	b.n	8003692 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	0f1b      	lsrs	r3, r3, #28
 8003668:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	0d1b      	lsrs	r3, r3, #20
 800366e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	0b1b      	lsrs	r3, r3, #12
 8003674:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	011a      	lsls	r2, r3, #4
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	431a      	orrs	r2, r3
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	031b      	lsls	r3, r3, #12
 800368a:	4313      	orrs	r3, r2
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800369a:	e003      	b.n	80036a4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	60da      	str	r2, [r3, #12]
}
 80036a4:	bf00      	nop
 80036a6:	372c      	adds	r7, #44	; 0x2c
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b089      	sub	sp, #36	; 0x24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	e177      	b.n	80039bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036cc:	2201      	movs	r2, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	f040 8166 	bne.w	80039b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d005      	beq.n	8003702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d130      	bne.n	8003764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	2203      	movs	r2, #3
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003738:	2201      	movs	r2, #1
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 0201 	and.w	r2, r3, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b03      	cmp	r3, #3
 800376e:	d017      	beq.n	80037a0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d123      	bne.n	80037f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	08da      	lsrs	r2, r3, #3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3208      	adds	r2, #8
 80037b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	220f      	movs	r2, #15
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	08da      	lsrs	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3208      	adds	r2, #8
 80037ee:	69b9      	ldr	r1, [r7, #24]
 80037f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	2203      	movs	r2, #3
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0203 	and.w	r2, r3, #3
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80c0 	beq.w	80039b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	4b66      	ldr	r3, [pc, #408]	; (80039d4 <HAL_GPIO_Init+0x324>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	4a65      	ldr	r2, [pc, #404]	; (80039d4 <HAL_GPIO_Init+0x324>)
 8003840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003844:	6453      	str	r3, [r2, #68]	; 0x44
 8003846:	4b63      	ldr	r3, [pc, #396]	; (80039d4 <HAL_GPIO_Init+0x324>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003852:	4a61      	ldr	r2, [pc, #388]	; (80039d8 <HAL_GPIO_Init+0x328>)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	3302      	adds	r3, #2
 800385a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	220f      	movs	r2, #15
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a58      	ldr	r2, [pc, #352]	; (80039dc <HAL_GPIO_Init+0x32c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d037      	beq.n	80038ee <HAL_GPIO_Init+0x23e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a57      	ldr	r2, [pc, #348]	; (80039e0 <HAL_GPIO_Init+0x330>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d031      	beq.n	80038ea <HAL_GPIO_Init+0x23a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a56      	ldr	r2, [pc, #344]	; (80039e4 <HAL_GPIO_Init+0x334>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d02b      	beq.n	80038e6 <HAL_GPIO_Init+0x236>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a55      	ldr	r2, [pc, #340]	; (80039e8 <HAL_GPIO_Init+0x338>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d025      	beq.n	80038e2 <HAL_GPIO_Init+0x232>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a54      	ldr	r2, [pc, #336]	; (80039ec <HAL_GPIO_Init+0x33c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d01f      	beq.n	80038de <HAL_GPIO_Init+0x22e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a53      	ldr	r2, [pc, #332]	; (80039f0 <HAL_GPIO_Init+0x340>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d019      	beq.n	80038da <HAL_GPIO_Init+0x22a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a52      	ldr	r2, [pc, #328]	; (80039f4 <HAL_GPIO_Init+0x344>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <HAL_GPIO_Init+0x226>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a51      	ldr	r2, [pc, #324]	; (80039f8 <HAL_GPIO_Init+0x348>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00d      	beq.n	80038d2 <HAL_GPIO_Init+0x222>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a50      	ldr	r2, [pc, #320]	; (80039fc <HAL_GPIO_Init+0x34c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d007      	beq.n	80038ce <HAL_GPIO_Init+0x21e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4f      	ldr	r2, [pc, #316]	; (8003a00 <HAL_GPIO_Init+0x350>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d101      	bne.n	80038ca <HAL_GPIO_Init+0x21a>
 80038c6:	2309      	movs	r3, #9
 80038c8:	e012      	b.n	80038f0 <HAL_GPIO_Init+0x240>
 80038ca:	230a      	movs	r3, #10
 80038cc:	e010      	b.n	80038f0 <HAL_GPIO_Init+0x240>
 80038ce:	2308      	movs	r3, #8
 80038d0:	e00e      	b.n	80038f0 <HAL_GPIO_Init+0x240>
 80038d2:	2307      	movs	r3, #7
 80038d4:	e00c      	b.n	80038f0 <HAL_GPIO_Init+0x240>
 80038d6:	2306      	movs	r3, #6
 80038d8:	e00a      	b.n	80038f0 <HAL_GPIO_Init+0x240>
 80038da:	2305      	movs	r3, #5
 80038dc:	e008      	b.n	80038f0 <HAL_GPIO_Init+0x240>
 80038de:	2304      	movs	r3, #4
 80038e0:	e006      	b.n	80038f0 <HAL_GPIO_Init+0x240>
 80038e2:	2303      	movs	r3, #3
 80038e4:	e004      	b.n	80038f0 <HAL_GPIO_Init+0x240>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e002      	b.n	80038f0 <HAL_GPIO_Init+0x240>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <HAL_GPIO_Init+0x240>
 80038ee:	2300      	movs	r3, #0
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	f002 0203 	and.w	r2, r2, #3
 80038f6:	0092      	lsls	r2, r2, #2
 80038f8:	4093      	lsls	r3, r2
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003900:	4935      	ldr	r1, [pc, #212]	; (80039d8 <HAL_GPIO_Init+0x328>)
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	3302      	adds	r3, #2
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800390e:	4b3d      	ldr	r3, [pc, #244]	; (8003a04 <HAL_GPIO_Init+0x354>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003932:	4a34      	ldr	r2, [pc, #208]	; (8003a04 <HAL_GPIO_Init+0x354>)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003938:	4b32      	ldr	r3, [pc, #200]	; (8003a04 <HAL_GPIO_Init+0x354>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800395c:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <HAL_GPIO_Init+0x354>)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003962:	4b28      	ldr	r3, [pc, #160]	; (8003a04 <HAL_GPIO_Init+0x354>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003986:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <HAL_GPIO_Init+0x354>)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800398c:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <HAL_GPIO_Init+0x354>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039b0:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <HAL_GPIO_Init+0x354>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3301      	adds	r3, #1
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	2b0f      	cmp	r3, #15
 80039c0:	f67f ae84 	bls.w	80036cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	3724      	adds	r7, #36	; 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40013800 	.word	0x40013800
 80039dc:	40020000 	.word	0x40020000
 80039e0:	40020400 	.word	0x40020400
 80039e4:	40020800 	.word	0x40020800
 80039e8:	40020c00 	.word	0x40020c00
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40021400 	.word	0x40021400
 80039f4:	40021800 	.word	0x40021800
 80039f8:	40021c00 	.word	0x40021c00
 80039fc:	40022000 	.word	0x40022000
 8003a00:	40022400 	.word	0x40022400
 8003a04:	40013c00 	.word	0x40013c00

08003a08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	e0d9      	b.n	8003bd8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a24:	2201      	movs	r2, #1
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	f040 80c9 	bne.w	8003bd2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003a40:	4a6b      	ldr	r2, [pc, #428]	; (8003bf0 <HAL_GPIO_DeInit+0x1e8>)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3302      	adds	r3, #2
 8003a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	220f      	movs	r2, #15
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a63      	ldr	r2, [pc, #396]	; (8003bf4 <HAL_GPIO_DeInit+0x1ec>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d037      	beq.n	8003ada <HAL_GPIO_DeInit+0xd2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a62      	ldr	r2, [pc, #392]	; (8003bf8 <HAL_GPIO_DeInit+0x1f0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d031      	beq.n	8003ad6 <HAL_GPIO_DeInit+0xce>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a61      	ldr	r2, [pc, #388]	; (8003bfc <HAL_GPIO_DeInit+0x1f4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d02b      	beq.n	8003ad2 <HAL_GPIO_DeInit+0xca>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a60      	ldr	r2, [pc, #384]	; (8003c00 <HAL_GPIO_DeInit+0x1f8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d025      	beq.n	8003ace <HAL_GPIO_DeInit+0xc6>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a5f      	ldr	r2, [pc, #380]	; (8003c04 <HAL_GPIO_DeInit+0x1fc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d01f      	beq.n	8003aca <HAL_GPIO_DeInit+0xc2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a5e      	ldr	r2, [pc, #376]	; (8003c08 <HAL_GPIO_DeInit+0x200>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d019      	beq.n	8003ac6 <HAL_GPIO_DeInit+0xbe>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a5d      	ldr	r2, [pc, #372]	; (8003c0c <HAL_GPIO_DeInit+0x204>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <HAL_GPIO_DeInit+0xba>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a5c      	ldr	r2, [pc, #368]	; (8003c10 <HAL_GPIO_DeInit+0x208>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00d      	beq.n	8003abe <HAL_GPIO_DeInit+0xb6>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a5b      	ldr	r2, [pc, #364]	; (8003c14 <HAL_GPIO_DeInit+0x20c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <HAL_GPIO_DeInit+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a5a      	ldr	r2, [pc, #360]	; (8003c18 <HAL_GPIO_DeInit+0x210>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d101      	bne.n	8003ab6 <HAL_GPIO_DeInit+0xae>
 8003ab2:	2309      	movs	r3, #9
 8003ab4:	e012      	b.n	8003adc <HAL_GPIO_DeInit+0xd4>
 8003ab6:	230a      	movs	r3, #10
 8003ab8:	e010      	b.n	8003adc <HAL_GPIO_DeInit+0xd4>
 8003aba:	2308      	movs	r3, #8
 8003abc:	e00e      	b.n	8003adc <HAL_GPIO_DeInit+0xd4>
 8003abe:	2307      	movs	r3, #7
 8003ac0:	e00c      	b.n	8003adc <HAL_GPIO_DeInit+0xd4>
 8003ac2:	2306      	movs	r3, #6
 8003ac4:	e00a      	b.n	8003adc <HAL_GPIO_DeInit+0xd4>
 8003ac6:	2305      	movs	r3, #5
 8003ac8:	e008      	b.n	8003adc <HAL_GPIO_DeInit+0xd4>
 8003aca:	2304      	movs	r3, #4
 8003acc:	e006      	b.n	8003adc <HAL_GPIO_DeInit+0xd4>
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e004      	b.n	8003adc <HAL_GPIO_DeInit+0xd4>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e002      	b.n	8003adc <HAL_GPIO_DeInit+0xd4>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <HAL_GPIO_DeInit+0xd4>
 8003ada:	2300      	movs	r3, #0
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	f002 0203 	and.w	r2, r2, #3
 8003ae2:	0092      	lsls	r2, r2, #2
 8003ae4:	4093      	lsls	r3, r2
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d132      	bne.n	8003b52 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003aec:	4b4b      	ldr	r3, [pc, #300]	; (8003c1c <HAL_GPIO_DeInit+0x214>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	4949      	ldr	r1, [pc, #292]	; (8003c1c <HAL_GPIO_DeInit+0x214>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003afa:	4b48      	ldr	r3, [pc, #288]	; (8003c1c <HAL_GPIO_DeInit+0x214>)
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	4946      	ldr	r1, [pc, #280]	; (8003c1c <HAL_GPIO_DeInit+0x214>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003b08:	4b44      	ldr	r3, [pc, #272]	; (8003c1c <HAL_GPIO_DeInit+0x214>)
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	4942      	ldr	r1, [pc, #264]	; (8003c1c <HAL_GPIO_DeInit+0x214>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003b16:	4b41      	ldr	r3, [pc, #260]	; (8003c1c <HAL_GPIO_DeInit+0x214>)
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	493f      	ldr	r1, [pc, #252]	; (8003c1c <HAL_GPIO_DeInit+0x214>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	220f      	movs	r2, #15
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003b34:	4a2e      	ldr	r2, [pc, #184]	; (8003bf0 <HAL_GPIO_DeInit+0x1e8>)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	43da      	mvns	r2, r3
 8003b44:	482a      	ldr	r0, [pc, #168]	; (8003bf0 <HAL_GPIO_DeInit+0x1e8>)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	400a      	ands	r2, r1
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	2103      	movs	r1, #3
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	401a      	ands	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	08da      	lsrs	r2, r3, #3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3208      	adds	r2, #8
 8003b70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	08d2      	lsrs	r2, r2, #3
 8003b88:	4019      	ands	r1, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3208      	adds	r2, #8
 8003b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	2103      	movs	r1, #3
 8003b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	2101      	movs	r1, #1
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	401a      	ands	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	2103      	movs	r1, #3
 8003bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	401a      	ands	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2b0f      	cmp	r3, #15
 8003bdc:	f67f af22 	bls.w	8003a24 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40013800 	.word	0x40013800
 8003bf4:	40020000 	.word	0x40020000
 8003bf8:	40020400 	.word	0x40020400
 8003bfc:	40020800 	.word	0x40020800
 8003c00:	40020c00 	.word	0x40020c00
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40021400 	.word	0x40021400
 8003c0c:	40021800 	.word	0x40021800
 8003c10:	40021c00 	.word	0x40021c00
 8003c14:	40022000 	.word	0x40022000
 8003c18:	40022400 	.word	0x40022400
 8003c1c:	40013c00 	.word	0x40013c00

08003c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c30:	787b      	ldrb	r3, [r7, #1]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c3c:	e003      	b.n	8003c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	041a      	lsls	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	619a      	str	r2, [r3, #24]
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e12b      	b.n	8003ebe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd f890 	bl	8000da0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2224      	movs	r2, #36	; 0x24
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ca6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cb8:	f001 f940 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 8003cbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4a81      	ldr	r2, [pc, #516]	; (8003ec8 <HAL_I2C_Init+0x274>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d807      	bhi.n	8003cd8 <HAL_I2C_Init+0x84>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4a80      	ldr	r2, [pc, #512]	; (8003ecc <HAL_I2C_Init+0x278>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	bf94      	ite	ls
 8003cd0:	2301      	movls	r3, #1
 8003cd2:	2300      	movhi	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	e006      	b.n	8003ce6 <HAL_I2C_Init+0x92>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4a7d      	ldr	r2, [pc, #500]	; (8003ed0 <HAL_I2C_Init+0x27c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	bf94      	ite	ls
 8003ce0:	2301      	movls	r3, #1
 8003ce2:	2300      	movhi	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e0e7      	b.n	8003ebe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4a78      	ldr	r2, [pc, #480]	; (8003ed4 <HAL_I2C_Init+0x280>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	0c9b      	lsrs	r3, r3, #18
 8003cf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	4a6a      	ldr	r2, [pc, #424]	; (8003ec8 <HAL_I2C_Init+0x274>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d802      	bhi.n	8003d28 <HAL_I2C_Init+0xd4>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	3301      	adds	r3, #1
 8003d26:	e009      	b.n	8003d3c <HAL_I2C_Init+0xe8>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	4a69      	ldr	r2, [pc, #420]	; (8003ed8 <HAL_I2C_Init+0x284>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	099b      	lsrs	r3, r3, #6
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	495c      	ldr	r1, [pc, #368]	; (8003ec8 <HAL_I2C_Init+0x274>)
 8003d58:	428b      	cmp	r3, r1
 8003d5a:	d819      	bhi.n	8003d90 <HAL_I2C_Init+0x13c>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	1e59      	subs	r1, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d6a:	1c59      	adds	r1, r3, #1
 8003d6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d70:	400b      	ands	r3, r1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <HAL_I2C_Init+0x138>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1e59      	subs	r1, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d84:	3301      	adds	r3, #1
 8003d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8a:	e051      	b.n	8003e30 <HAL_I2C_Init+0x1dc>
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	e04f      	b.n	8003e30 <HAL_I2C_Init+0x1dc>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d111      	bne.n	8003dbc <HAL_I2C_Init+0x168>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1e58      	subs	r0, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6859      	ldr	r1, [r3, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	440b      	add	r3, r1
 8003da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003daa:	3301      	adds	r3, #1
 8003dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bf0c      	ite	eq
 8003db4:	2301      	moveq	r3, #1
 8003db6:	2300      	movne	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	e012      	b.n	8003de2 <HAL_I2C_Init+0x18e>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	1e58      	subs	r0, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6859      	ldr	r1, [r3, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	0099      	lsls	r1, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_I2C_Init+0x196>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e022      	b.n	8003e30 <HAL_I2C_Init+0x1dc>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10e      	bne.n	8003e10 <HAL_I2C_Init+0x1bc>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1e58      	subs	r0, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6859      	ldr	r1, [r3, #4]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	440b      	add	r3, r1
 8003e00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e04:	3301      	adds	r3, #1
 8003e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e0e:	e00f      	b.n	8003e30 <HAL_I2C_Init+0x1dc>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1e58      	subs	r0, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6859      	ldr	r1, [r3, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	0099      	lsls	r1, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e26:	3301      	adds	r3, #1
 8003e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	6809      	ldr	r1, [r1, #0]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6911      	ldr	r1, [r2, #16]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68d2      	ldr	r2, [r2, #12]
 8003e6a:	4311      	orrs	r1, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	000186a0 	.word	0x000186a0
 8003ecc:	001e847f 	.word	0x001e847f
 8003ed0:	003d08ff 	.word	0x003d08ff
 8003ed4:	431bde83 	.word	0x431bde83
 8003ed8:	10624dd3 	.word	0x10624dd3

08003edc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d129      	bne.n	8003f46 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2224      	movs	r2, #36	; 0x24
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0201 	bic.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0210 	bic.w	r2, r2, #16
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0201 	orr.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
  }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d12a      	bne.n	8003fc4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2224      	movs	r2, #36	; 0x24
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003f8e:	89fb      	ldrh	r3, [r7, #14]
 8003f90:	f023 030f 	bic.w	r3, r3, #15
 8003f94:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	89fb      	ldrh	r3, [r7, #14]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	89fa      	ldrh	r2, [r7, #14]
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e000      	b.n	8003fc6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e0bf      	b.n	8004166 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fc ff3a 	bl	8000e74 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004016:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6999      	ldr	r1, [r3, #24]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800402c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6899      	ldr	r1, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4b4a      	ldr	r3, [pc, #296]	; (8004170 <HAL_LTDC_Init+0x19c>)
 8004048:	400b      	ands	r3, r1
 800404a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	041b      	lsls	r3, r3, #16
 8004052:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6899      	ldr	r1, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68d9      	ldr	r1, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b3e      	ldr	r3, [pc, #248]	; (8004170 <HAL_LTDC_Init+0x19c>)
 8004076:	400b      	ands	r3, r1
 8004078:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	041b      	lsls	r3, r3, #16
 8004080:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68d9      	ldr	r1, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1a      	ldr	r2, [r3, #32]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6919      	ldr	r1, [r3, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4b33      	ldr	r3, [pc, #204]	; (8004170 <HAL_LTDC_Init+0x19c>)
 80040a4:	400b      	ands	r3, r1
 80040a6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6919      	ldr	r1, [r3, #16]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6959      	ldr	r1, [r3, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4b27      	ldr	r3, [pc, #156]	; (8004170 <HAL_LTDC_Init+0x19c>)
 80040d2:	400b      	ands	r3, r1
 80040d4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	041b      	lsls	r3, r3, #16
 80040dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6959      	ldr	r1, [r3, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040fa:	021b      	lsls	r3, r3, #8
 80040fc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004116:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0206 	orr.w	r2, r2, #6
 8004142:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	f000f800 	.word	0xf000f800

08004174 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d023      	beq.n	80041de <HAL_LTDC_IRQHandler+0x6a>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01e      	beq.n	80041de <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0204 	bic.w	r2, r2, #4
 80041ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2204      	movs	r2, #4
 80041b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041be:	f043 0201 	orr.w	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2204      	movs	r2, #4
 80041cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f86f 	bl	80042bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d023      	beq.n	8004230 <HAL_LTDC_IRQHandler+0xbc>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01e      	beq.n	8004230 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0202 	bic.w	r2, r2, #2
 8004200:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2202      	movs	r2, #2
 8004208:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004210:	f043 0202 	orr.w	r2, r3, #2
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2204      	movs	r2, #4
 800421e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f846 	bl	80042bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d01b      	beq.n	8004272 <HAL_LTDC_IRQHandler+0xfe>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d016      	beq.n	8004272 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2201      	movs	r2, #1
 800425a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f82f 	bl	80042d0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01b      	beq.n	80042b4 <HAL_LTDC_IRQHandler+0x140>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d016      	beq.n	80042b4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0208 	bic.w	r2, r2, #8
 8004294:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2208      	movs	r2, #8
 800429c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f818 	bl	80042e4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80042f8:	b5b0      	push	{r4, r5, r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_LTDC_ConfigLayer+0x1a>
 800430e:	2302      	movs	r3, #2
 8004310:	e02c      	b.n	800436c <HAL_LTDC_ConfigLayer+0x74>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2202      	movs	r2, #2
 800431e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2134      	movs	r1, #52	; 0x34
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4614      	mov	r4, r2
 8004336:	461d      	mov	r5, r3
 8004338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800433a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800433c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800433e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f811 	bl	8004374 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2201      	movs	r2, #1
 8004358:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bdb0      	pop	{r4, r5, r7, pc}

08004374 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004374:	b480      	push	{r7}
 8004376:	b089      	sub	sp, #36	; 0x24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	0c1b      	lsrs	r3, r3, #16
 800438c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004390:	4413      	add	r3, r2
 8004392:	041b      	lsls	r3, r3, #16
 8004394:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	01db      	lsls	r3, r3, #7
 80043a0:	4413      	add	r3, r2
 80043a2:	3384      	adds	r3, #132	; 0x84
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	4611      	mov	r1, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	01d2      	lsls	r2, r2, #7
 80043b0:	440a      	add	r2, r1
 80043b2:	3284      	adds	r2, #132	; 0x84
 80043b4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80043b8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	0c1b      	lsrs	r3, r3, #16
 80043c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ca:	4413      	add	r3, r2
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4619      	mov	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	01db      	lsls	r3, r3, #7
 80043d8:	440b      	add	r3, r1
 80043da:	3384      	adds	r3, #132	; 0x84
 80043dc:	4619      	mov	r1, r3
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043f2:	4413      	add	r3, r2
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	01db      	lsls	r3, r3, #7
 8004402:	4413      	add	r3, r2
 8004404:	3384      	adds	r3, #132	; 0x84
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	4611      	mov	r1, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	01d2      	lsls	r2, r2, #7
 8004412:	440a      	add	r2, r1
 8004414:	3284      	adds	r2, #132	; 0x84
 8004416:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800441a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800442a:	4413      	add	r3, r2
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4619      	mov	r1, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	01db      	lsls	r3, r3, #7
 8004438:	440b      	add	r3, r1
 800443a:	3384      	adds	r3, #132	; 0x84
 800443c:	4619      	mov	r1, r3
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4313      	orrs	r3, r2
 8004442:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	01db      	lsls	r3, r3, #7
 800444e:	4413      	add	r3, r2
 8004450:	3384      	adds	r3, #132	; 0x84
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	4611      	mov	r1, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	01d2      	lsls	r2, r2, #7
 800445e:	440a      	add	r2, r1
 8004460:	3284      	adds	r2, #132	; 0x84
 8004462:	f023 0307 	bic.w	r3, r3, #7
 8004466:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	01db      	lsls	r3, r3, #7
 8004472:	4413      	add	r3, r2
 8004474:	3384      	adds	r3, #132	; 0x84
 8004476:	461a      	mov	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800448e:	041b      	lsls	r3, r3, #16
 8004490:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	061b      	lsls	r3, r3, #24
 8004498:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	01db      	lsls	r3, r3, #7
 80044a4:	4413      	add	r3, r2
 80044a6:	3384      	adds	r3, #132	; 0x84
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	01db      	lsls	r3, r3, #7
 80044b4:	4413      	add	r3, r2
 80044b6:	3384      	adds	r3, #132	; 0x84
 80044b8:	461a      	mov	r2, r3
 80044ba:	2300      	movs	r3, #0
 80044bc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044c4:	461a      	mov	r2, r3
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	431a      	orrs	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4619      	mov	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	01db      	lsls	r3, r3, #7
 80044d8:	440b      	add	r3, r1
 80044da:	3384      	adds	r3, #132	; 0x84
 80044dc:	4619      	mov	r1, r3
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	01db      	lsls	r3, r3, #7
 80044ee:	4413      	add	r3, r2
 80044f0:	3384      	adds	r3, #132	; 0x84
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	6812      	ldr	r2, [r2, #0]
 80044f8:	4611      	mov	r1, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	01d2      	lsls	r2, r2, #7
 80044fe:	440a      	add	r2, r1
 8004500:	3284      	adds	r2, #132	; 0x84
 8004502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004506:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	01db      	lsls	r3, r3, #7
 8004512:	4413      	add	r3, r2
 8004514:	3384      	adds	r3, #132	; 0x84
 8004516:	461a      	mov	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	01db      	lsls	r3, r3, #7
 8004528:	4413      	add	r3, r2
 800452a:	3384      	adds	r3, #132	; 0x84
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	4611      	mov	r1, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	01d2      	lsls	r2, r2, #7
 8004538:	440a      	add	r2, r1
 800453a:	3284      	adds	r2, #132	; 0x84
 800453c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004540:	f023 0307 	bic.w	r3, r3, #7
 8004544:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	68f9      	ldr	r1, [r7, #12]
 8004550:	6809      	ldr	r1, [r1, #0]
 8004552:	4608      	mov	r0, r1
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	01c9      	lsls	r1, r1, #7
 8004558:	4401      	add	r1, r0
 800455a:	3184      	adds	r1, #132	; 0x84
 800455c:	4313      	orrs	r3, r2
 800455e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	01db      	lsls	r3, r3, #7
 800456a:	4413      	add	r3, r2
 800456c:	3384      	adds	r3, #132	; 0x84
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	01db      	lsls	r3, r3, #7
 800457a:	4413      	add	r3, r2
 800457c:	3384      	adds	r3, #132	; 0x84
 800457e:	461a      	mov	r2, r3
 8004580:	2300      	movs	r3, #0
 8004582:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	01db      	lsls	r3, r3, #7
 800458e:	4413      	add	r3, r2
 8004590:	3384      	adds	r3, #132	; 0x84
 8004592:	461a      	mov	r2, r3
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80045a2:	2304      	movs	r3, #4
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	e01b      	b.n	80045e0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d102      	bne.n	80045b6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80045b0:	2303      	movs	r3, #3
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	e014      	b.n	80045e0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d00b      	beq.n	80045d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d007      	beq.n	80045d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d003      	beq.n	80045d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80045d2:	2b07      	cmp	r3, #7
 80045d4:	d102      	bne.n	80045dc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80045d6:	2302      	movs	r3, #2
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	e001      	b.n	80045e0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80045dc:	2301      	movs	r3, #1
 80045de:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	01db      	lsls	r3, r3, #7
 80045ea:	4413      	add	r3, r2
 80045ec:	3384      	adds	r3, #132	; 0x84
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	4611      	mov	r1, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	01d2      	lsls	r2, r2, #7
 80045fa:	440a      	add	r2, r1
 80045fc:	3284      	adds	r2, #132	; 0x84
 80045fe:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004602:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	041a      	lsls	r2, r3, #16
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	1acb      	subs	r3, r1, r3
 800461a:	69f9      	ldr	r1, [r7, #28]
 800461c:	fb01 f303 	mul.w	r3, r1, r3
 8004620:	3303      	adds	r3, #3
 8004622:	68f9      	ldr	r1, [r7, #12]
 8004624:	6809      	ldr	r1, [r1, #0]
 8004626:	4608      	mov	r0, r1
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	01c9      	lsls	r1, r1, #7
 800462c:	4401      	add	r1, r0
 800462e:	3184      	adds	r1, #132	; 0x84
 8004630:	4313      	orrs	r3, r2
 8004632:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	01db      	lsls	r3, r3, #7
 800463e:	4413      	add	r3, r2
 8004640:	3384      	adds	r3, #132	; 0x84
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	4611      	mov	r1, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	01d2      	lsls	r2, r2, #7
 800464e:	440a      	add	r2, r1
 8004650:	3284      	adds	r2, #132	; 0x84
 8004652:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004656:	f023 0307 	bic.w	r3, r3, #7
 800465a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	01db      	lsls	r3, r3, #7
 8004666:	4413      	add	r3, r2
 8004668:	3384      	adds	r3, #132	; 0x84
 800466a:	461a      	mov	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	01db      	lsls	r3, r3, #7
 800467c:	4413      	add	r3, r2
 800467e:	3384      	adds	r3, #132	; 0x84
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	4611      	mov	r1, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	01d2      	lsls	r2, r2, #7
 800468c:	440a      	add	r2, r1
 800468e:	3284      	adds	r2, #132	; 0x84
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	6013      	str	r3, [r2, #0]
}
 8004696:	bf00      	nop
 8004698:	3724      	adds	r7, #36	; 0x24
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e264      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d075      	beq.n	80047ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046c2:	4ba3      	ldr	r3, [pc, #652]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d00c      	beq.n	80046e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ce:	4ba0      	ldr	r3, [pc, #640]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d112      	bne.n	8004700 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046da:	4b9d      	ldr	r3, [pc, #628]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e6:	d10b      	bne.n	8004700 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e8:	4b99      	ldr	r3, [pc, #612]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d05b      	beq.n	80047ac <HAL_RCC_OscConfig+0x108>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d157      	bne.n	80047ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e23f      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004708:	d106      	bne.n	8004718 <HAL_RCC_OscConfig+0x74>
 800470a:	4b91      	ldr	r3, [pc, #580]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a90      	ldr	r2, [pc, #576]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	e01d      	b.n	8004754 <HAL_RCC_OscConfig+0xb0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0x98>
 8004722:	4b8b      	ldr	r3, [pc, #556]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a8a      	ldr	r2, [pc, #552]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4b88      	ldr	r3, [pc, #544]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a87      	ldr	r2, [pc, #540]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	e00b      	b.n	8004754 <HAL_RCC_OscConfig+0xb0>
 800473c:	4b84      	ldr	r3, [pc, #528]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a83      	ldr	r2, [pc, #524]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b81      	ldr	r3, [pc, #516]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a80      	ldr	r2, [pc, #512]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 800474e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d013      	beq.n	8004784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fe f93c 	bl	80029d8 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004764:	f7fe f938 	bl	80029d8 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b64      	cmp	r3, #100	; 0x64
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e204      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	4b76      	ldr	r3, [pc, #472]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0xc0>
 8004782:	e014      	b.n	80047ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fe f928 	bl	80029d8 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800478c:	f7fe f924 	bl	80029d8 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e1f0      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479e:	4b6c      	ldr	r3, [pc, #432]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0xe8>
 80047aa:	e000      	b.n	80047ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d063      	beq.n	8004882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ba:	4b65      	ldr	r3, [pc, #404]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00b      	beq.n	80047de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047c6:	4b62      	ldr	r3, [pc, #392]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d11c      	bne.n	800480c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047d2:	4b5f      	ldr	r3, [pc, #380]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d116      	bne.n	800480c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047de:	4b5c      	ldr	r3, [pc, #368]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_RCC_OscConfig+0x152>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d001      	beq.n	80047f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e1c4      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f6:	4b56      	ldr	r3, [pc, #344]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4952      	ldr	r1, [pc, #328]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004806:	4313      	orrs	r3, r2
 8004808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480a:	e03a      	b.n	8004882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d020      	beq.n	8004856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004814:	4b4f      	ldr	r3, [pc, #316]	; (8004954 <HAL_RCC_OscConfig+0x2b0>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481a:	f7fe f8dd 	bl	80029d8 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004822:	f7fe f8d9 	bl	80029d8 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e1a5      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004834:	4b46      	ldr	r3, [pc, #280]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004840:	4b43      	ldr	r3, [pc, #268]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4940      	ldr	r1, [pc, #256]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]
 8004854:	e015      	b.n	8004882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004856:	4b3f      	ldr	r3, [pc, #252]	; (8004954 <HAL_RCC_OscConfig+0x2b0>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fe f8bc 	bl	80029d8 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004864:	f7fe f8b8 	bl	80029d8 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e184      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004876:	4b36      	ldr	r3, [pc, #216]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d030      	beq.n	80048f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d016      	beq.n	80048c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004896:	4b30      	ldr	r3, [pc, #192]	; (8004958 <HAL_RCC_OscConfig+0x2b4>)
 8004898:	2201      	movs	r2, #1
 800489a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7fe f89c 	bl	80029d8 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048a4:	f7fe f898 	bl	80029d8 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e164      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b6:	4b26      	ldr	r3, [pc, #152]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x200>
 80048c2:	e015      	b.n	80048f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c4:	4b24      	ldr	r3, [pc, #144]	; (8004958 <HAL_RCC_OscConfig+0x2b4>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ca:	f7fe f885 	bl	80029d8 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d2:	f7fe f881 	bl	80029d8 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e14d      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e4:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80048e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1f0      	bne.n	80048d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80a0 	beq.w	8004a3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048fe:	2300      	movs	r3, #0
 8004900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004902:	4b13      	ldr	r3, [pc, #76]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10f      	bne.n	800492e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	4a0e      	ldr	r2, [pc, #56]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491c:	6413      	str	r3, [r2, #64]	; 0x40
 800491e:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004926:	60bb      	str	r3, [r7, #8]
 8004928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492a:	2301      	movs	r3, #1
 800492c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492e:	4b0b      	ldr	r3, [pc, #44]	; (800495c <HAL_RCC_OscConfig+0x2b8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d121      	bne.n	800497e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800493a:	4b08      	ldr	r3, [pc, #32]	; (800495c <HAL_RCC_OscConfig+0x2b8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a07      	ldr	r2, [pc, #28]	; (800495c <HAL_RCC_OscConfig+0x2b8>)
 8004940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004946:	f7fe f847 	bl	80029d8 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494c:	e011      	b.n	8004972 <HAL_RCC_OscConfig+0x2ce>
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800
 8004954:	42470000 	.word	0x42470000
 8004958:	42470e80 	.word	0x42470e80
 800495c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004960:	f7fe f83a 	bl	80029d8 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e106      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004972:	4b85      	ldr	r3, [pc, #532]	; (8004b88 <HAL_RCC_OscConfig+0x4e4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d106      	bne.n	8004994 <HAL_RCC_OscConfig+0x2f0>
 8004986:	4b81      	ldr	r3, [pc, #516]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498a:	4a80      	ldr	r2, [pc, #512]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	6713      	str	r3, [r2, #112]	; 0x70
 8004992:	e01c      	b.n	80049ce <HAL_RCC_OscConfig+0x32a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b05      	cmp	r3, #5
 800499a:	d10c      	bne.n	80049b6 <HAL_RCC_OscConfig+0x312>
 800499c:	4b7b      	ldr	r3, [pc, #492]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	4a7a      	ldr	r2, [pc, #488]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049a2:	f043 0304 	orr.w	r3, r3, #4
 80049a6:	6713      	str	r3, [r2, #112]	; 0x70
 80049a8:	4b78      	ldr	r3, [pc, #480]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	4a77      	ldr	r2, [pc, #476]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	6713      	str	r3, [r2, #112]	; 0x70
 80049b4:	e00b      	b.n	80049ce <HAL_RCC_OscConfig+0x32a>
 80049b6:	4b75      	ldr	r3, [pc, #468]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	4a74      	ldr	r2, [pc, #464]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049bc:	f023 0301 	bic.w	r3, r3, #1
 80049c0:	6713      	str	r3, [r2, #112]	; 0x70
 80049c2:	4b72      	ldr	r3, [pc, #456]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	4a71      	ldr	r2, [pc, #452]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049c8:	f023 0304 	bic.w	r3, r3, #4
 80049cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d015      	beq.n	8004a02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d6:	f7fd ffff 	bl	80029d8 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049dc:	e00a      	b.n	80049f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049de:	f7fd fffb 	bl	80029d8 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e0c5      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f4:	4b65      	ldr	r3, [pc, #404]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0ee      	beq.n	80049de <HAL_RCC_OscConfig+0x33a>
 8004a00:	e014      	b.n	8004a2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a02:	f7fd ffe9 	bl	80029d8 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a08:	e00a      	b.n	8004a20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a0a:	f7fd ffe5 	bl	80029d8 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e0af      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a20:	4b5a      	ldr	r3, [pc, #360]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1ee      	bne.n	8004a0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d105      	bne.n	8004a3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a32:	4b56      	ldr	r3, [pc, #344]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	4a55      	ldr	r2, [pc, #340]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 809b 	beq.w	8004b7e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a48:	4b50      	ldr	r3, [pc, #320]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 030c 	and.w	r3, r3, #12
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d05c      	beq.n	8004b0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d141      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a5c:	4b4c      	ldr	r3, [pc, #304]	; (8004b90 <HAL_RCC_OscConfig+0x4ec>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a62:	f7fd ffb9 	bl	80029d8 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a6a:	f7fd ffb5 	bl	80029d8 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e081      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7c:	4b43      	ldr	r3, [pc, #268]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f0      	bne.n	8004a6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	019b      	lsls	r3, r3, #6
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	041b      	lsls	r3, r3, #16
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	061b      	lsls	r3, r3, #24
 8004aac:	4937      	ldr	r1, [pc, #220]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ab2:	4b37      	ldr	r3, [pc, #220]	; (8004b90 <HAL_RCC_OscConfig+0x4ec>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab8:	f7fd ff8e 	bl	80029d8 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac0:	f7fd ff8a 	bl	80029d8 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e056      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad2:	4b2e      	ldr	r3, [pc, #184]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x41c>
 8004ade:	e04e      	b.n	8004b7e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae0:	4b2b      	ldr	r3, [pc, #172]	; (8004b90 <HAL_RCC_OscConfig+0x4ec>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae6:	f7fd ff77 	bl	80029d8 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aee:	f7fd ff73 	bl	80029d8 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e03f      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b00:	4b22      	ldr	r3, [pc, #136]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f0      	bne.n	8004aee <HAL_RCC_OscConfig+0x44a>
 8004b0c:	e037      	b.n	8004b7e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e032      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b1a:	4b1c      	ldr	r3, [pc, #112]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d028      	beq.n	8004b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d121      	bne.n	8004b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d11a      	bne.n	8004b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b50:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d111      	bne.n	8004b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	3b01      	subs	r3, #1
 8004b64:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d107      	bne.n	8004b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d001      	beq.n	8004b7e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40007000 	.word	0x40007000
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	42470060 	.word	0x42470060

08004b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0cc      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b68      	ldr	r3, [pc, #416]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d90c      	bls.n	8004bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb6:	4b65      	ldr	r3, [pc, #404]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b63      	ldr	r3, [pc, #396]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0b8      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d020      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be8:	4b59      	ldr	r3, [pc, #356]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4a58      	ldr	r2, [pc, #352]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c00:	4b53      	ldr	r3, [pc, #332]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	4a52      	ldr	r2, [pc, #328]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c0c:	4b50      	ldr	r3, [pc, #320]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	494d      	ldr	r1, [pc, #308]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d044      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d107      	bne.n	8004c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c32:	4b47      	ldr	r3, [pc, #284]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d119      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e07f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d003      	beq.n	8004c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d107      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c52:	4b3f      	ldr	r3, [pc, #252]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e06f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c62:	4b3b      	ldr	r3, [pc, #236]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e067      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c72:	4b37      	ldr	r3, [pc, #220]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f023 0203 	bic.w	r2, r3, #3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4934      	ldr	r1, [pc, #208]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c84:	f7fd fea8 	bl	80029d8 <HAL_GetTick>
 8004c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8a:	e00a      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c8c:	f7fd fea4 	bl	80029d8 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e04f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca2:	4b2b      	ldr	r3, [pc, #172]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 020c 	and.w	r2, r3, #12
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d1eb      	bne.n	8004c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d20c      	bcs.n	8004cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cca:	4b20      	ldr	r3, [pc, #128]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e032      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce8:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4916      	ldr	r1, [pc, #88]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d06:	4b12      	ldr	r3, [pc, #72]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	490e      	ldr	r1, [pc, #56]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d1a:	f000 f821 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	490a      	ldr	r1, [pc, #40]	; (8004d54 <HAL_RCC_ClockConfig+0x1c0>)
 8004d2c:	5ccb      	ldrb	r3, [r1, r3]
 8004d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d32:	4a09      	ldr	r2, [pc, #36]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fc fb1c 	bl	8001378 <HAL_InitTick>

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40023c00 	.word	0x40023c00
 8004d50:	40023800 	.word	0x40023800
 8004d54:	08007030 	.word	0x08007030
 8004d58:	20000000 	.word	0x20000000
 8004d5c:	20000048 	.word	0x20000048

08004d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	607b      	str	r3, [r7, #4]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	2300      	movs	r3, #0
 8004d72:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d78:	4b67      	ldr	r3, [pc, #412]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 030c 	and.w	r3, r3, #12
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d00d      	beq.n	8004da0 <HAL_RCC_GetSysClockFreq+0x40>
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	f200 80bd 	bhi.w	8004f04 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0x34>
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d003      	beq.n	8004d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d92:	e0b7      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d94:	4b61      	ldr	r3, [pc, #388]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d96:	60bb      	str	r3, [r7, #8]
       break;
 8004d98:	e0b7      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d9a:	4b61      	ldr	r3, [pc, #388]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004d9c:	60bb      	str	r3, [r7, #8]
      break;
 8004d9e:	e0b4      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004da0:	4b5d      	ldr	r3, [pc, #372]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004da8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004daa:	4b5b      	ldr	r3, [pc, #364]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d04d      	beq.n	8004e52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db6:	4b58      	ldr	r3, [pc, #352]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	099b      	lsrs	r3, r3, #6
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004dc6:	f04f 0100 	mov.w	r1, #0
 8004dca:	ea02 0800 	and.w	r8, r2, r0
 8004dce:	ea03 0901 	and.w	r9, r3, r1
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	014b      	lsls	r3, r1, #5
 8004de0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004de4:	0142      	lsls	r2, r0, #5
 8004de6:	4610      	mov	r0, r2
 8004de8:	4619      	mov	r1, r3
 8004dea:	ebb0 0008 	subs.w	r0, r0, r8
 8004dee:	eb61 0109 	sbc.w	r1, r1, r9
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	018b      	lsls	r3, r1, #6
 8004dfc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e00:	0182      	lsls	r2, r0, #6
 8004e02:	1a12      	subs	r2, r2, r0
 8004e04:	eb63 0301 	sbc.w	r3, r3, r1
 8004e08:	f04f 0000 	mov.w	r0, #0
 8004e0c:	f04f 0100 	mov.w	r1, #0
 8004e10:	00d9      	lsls	r1, r3, #3
 8004e12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e16:	00d0      	lsls	r0, r2, #3
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	eb12 0208 	adds.w	r2, r2, r8
 8004e20:	eb43 0309 	adc.w	r3, r3, r9
 8004e24:	f04f 0000 	mov.w	r0, #0
 8004e28:	f04f 0100 	mov.w	r1, #0
 8004e2c:	0259      	lsls	r1, r3, #9
 8004e2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004e32:	0250      	lsls	r0, r2, #9
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	f7fb f9d2 	bl	80001ec <__aeabi_uldivmod>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	e04a      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e52:	4b31      	ldr	r3, [pc, #196]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	099b      	lsrs	r3, r3, #6
 8004e58:	461a      	mov	r2, r3
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e62:	f04f 0100 	mov.w	r1, #0
 8004e66:	ea02 0400 	and.w	r4, r2, r0
 8004e6a:	ea03 0501 	and.w	r5, r3, r1
 8004e6e:	4620      	mov	r0, r4
 8004e70:	4629      	mov	r1, r5
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	014b      	lsls	r3, r1, #5
 8004e7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e80:	0142      	lsls	r2, r0, #5
 8004e82:	4610      	mov	r0, r2
 8004e84:	4619      	mov	r1, r3
 8004e86:	1b00      	subs	r0, r0, r4
 8004e88:	eb61 0105 	sbc.w	r1, r1, r5
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	018b      	lsls	r3, r1, #6
 8004e96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e9a:	0182      	lsls	r2, r0, #6
 8004e9c:	1a12      	subs	r2, r2, r0
 8004e9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004ea2:	f04f 0000 	mov.w	r0, #0
 8004ea6:	f04f 0100 	mov.w	r1, #0
 8004eaa:	00d9      	lsls	r1, r3, #3
 8004eac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eb0:	00d0      	lsls	r0, r2, #3
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	1912      	adds	r2, r2, r4
 8004eb8:	eb45 0303 	adc.w	r3, r5, r3
 8004ebc:	f04f 0000 	mov.w	r0, #0
 8004ec0:	f04f 0100 	mov.w	r1, #0
 8004ec4:	0299      	lsls	r1, r3, #10
 8004ec6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004eca:	0290      	lsls	r0, r2, #10
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	f7fb f986 	bl	80001ec <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	0c1b      	lsrs	r3, r3, #16
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	60bb      	str	r3, [r7, #8]
      break;
 8004f02:	e002      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f04:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f06:	60bb      	str	r3, [r7, #8]
      break;
 8004f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	00f42400 	.word	0x00f42400
 8004f20:	007a1200 	.word	0x007a1200

08004f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f28:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20000000 	.word	0x20000000

08004f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f40:	f7ff fff0 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f44:	4602      	mov	r2, r0
 8004f46:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	0a9b      	lsrs	r3, r3, #10
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	4903      	ldr	r1, [pc, #12]	; (8004f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f52:	5ccb      	ldrb	r3, [r1, r3]
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	08007040 	.word	0x08007040

08004f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f68:	f7ff ffdc 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	0b5b      	lsrs	r3, r3, #13
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	4903      	ldr	r1, [pc, #12]	; (8004f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f7a:	5ccb      	ldrb	r3, [r1, r3]
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40023800 	.word	0x40023800
 8004f88:	08007040 	.word	0x08007040

08004f8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	220f      	movs	r2, #15
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f9c:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0203 	and.w	r2, r3, #3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fa8:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004fc0:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	08db      	lsrs	r3, r3, #3
 8004fc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fce:	4b07      	ldr	r3, [pc, #28]	; (8004fec <HAL_RCC_GetClockConfig+0x60>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 020f 	and.w	r2, r3, #15
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	601a      	str	r2, [r3, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	40023c00 	.word	0x40023c00

08004ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10b      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005014:	2b00      	cmp	r3, #0
 8005016:	d105      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005020:	2b00      	cmp	r3, #0
 8005022:	d075      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005024:	4bad      	ldr	r3, [pc, #692]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800502a:	f7fd fcd5 	bl	80029d8 <HAL_GetTick>
 800502e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005030:	e008      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005032:	f7fd fcd1 	bl	80029d8 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e18b      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005044:	4ba6      	ldr	r3, [pc, #664]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f0      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d009      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	019a      	lsls	r2, r3, #6
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	071b      	lsls	r3, r3, #28
 8005068:	499d      	ldr	r1, [pc, #628]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01f      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800507c:	4b98      	ldr	r3, [pc, #608]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800507e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005082:	0f1b      	lsrs	r3, r3, #28
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	019a      	lsls	r2, r3, #6
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	061b      	lsls	r3, r3, #24
 8005096:	431a      	orrs	r2, r3
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	071b      	lsls	r3, r3, #28
 800509c:	4990      	ldr	r1, [pc, #576]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050a4:	4b8e      	ldr	r3, [pc, #568]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050aa:	f023 021f 	bic.w	r2, r3, #31
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	498a      	ldr	r1, [pc, #552]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00d      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	019a      	lsls	r2, r3, #6
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	061b      	lsls	r3, r3, #24
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	071b      	lsls	r3, r3, #28
 80050dc:	4980      	ldr	r1, [pc, #512]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050e4:	4b7d      	ldr	r3, [pc, #500]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050ea:	f7fd fc75 	bl	80029d8 <HAL_GetTick>
 80050ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050f0:	e008      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050f2:	f7fd fc71 	bl	80029d8 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e12b      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005104:	4b76      	ldr	r3, [pc, #472]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0f0      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d105      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005124:	2b00      	cmp	r3, #0
 8005126:	d079      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005128:	4b6e      	ldr	r3, [pc, #440]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800512e:	f7fd fc53 	bl	80029d8 <HAL_GetTick>
 8005132:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005134:	e008      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005136:	f7fd fc4f 	bl	80029d8 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e109      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005148:	4b65      	ldr	r3, [pc, #404]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005154:	d0ef      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	d020      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005162:	4b5f      	ldr	r3, [pc, #380]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005168:	0f1b      	lsrs	r3, r3, #28
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	019a      	lsls	r2, r3, #6
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	061b      	lsls	r3, r3, #24
 800517c:	431a      	orrs	r2, r3
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	071b      	lsls	r3, r3, #28
 8005182:	4957      	ldr	r1, [pc, #348]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800518a:	4b55      	ldr	r3, [pc, #340]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800518c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005190:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	3b01      	subs	r3, #1
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	4950      	ldr	r1, [pc, #320]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01e      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051b0:	4b4b      	ldr	r3, [pc, #300]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b6:	0e1b      	lsrs	r3, r3, #24
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	019a      	lsls	r2, r3, #6
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	061b      	lsls	r3, r3, #24
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	071b      	lsls	r3, r3, #28
 80051d0:	4943      	ldr	r1, [pc, #268]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051d8:	4b41      	ldr	r3, [pc, #260]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	493e      	ldr	r1, [pc, #248]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051ee:	4b3d      	ldr	r3, [pc, #244]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051f4:	f7fd fbf0 	bl	80029d8 <HAL_GetTick>
 80051f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80051fc:	f7fd fbec 	bl	80029d8 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e0a6      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800520e:	4b34      	ldr	r3, [pc, #208]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800521a:	d1ef      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 808d 	beq.w	8005344 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	4b2c      	ldr	r3, [pc, #176]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	4a2b      	ldr	r2, [pc, #172]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005238:	6413      	str	r3, [r2, #64]	; 0x40
 800523a:	4b29      	ldr	r3, [pc, #164]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005246:	4b28      	ldr	r3, [pc, #160]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a27      	ldr	r2, [pc, #156]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800524c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005250:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005252:	f7fd fbc1 	bl	80029d8 <HAL_GetTick>
 8005256:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005258:	e008      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800525a:	f7fd fbbd 	bl	80029d8 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e077      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800526c:	4b1e      	ldr	r3, [pc, #120]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005278:	4b19      	ldr	r3, [pc, #100]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005280:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d039      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	429a      	cmp	r2, r3
 8005294:	d032      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005296:	4b12      	ldr	r3, [pc, #72]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800529e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052a0:	4b12      	ldr	r3, [pc, #72]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052ac:	4a0c      	ldr	r2, [pc, #48]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052b2:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d11e      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052be:	f7fd fb8b 	bl	80029d8 <HAL_GetTick>
 80052c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c4:	e014      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c6:	f7fd fb87 	bl	80029d8 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d90b      	bls.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e03f      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80052dc:	42470068 	.word	0x42470068
 80052e0:	40023800 	.word	0x40023800
 80052e4:	42470070 	.word	0x42470070
 80052e8:	40007000 	.word	0x40007000
 80052ec:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f0:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0e4      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005308:	d10d      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800530a:	4b16      	ldr	r3, [pc, #88]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800531a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531e:	4911      	ldr	r1, [pc, #68]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005320:	4313      	orrs	r3, r2
 8005322:	608b      	str	r3, [r1, #8]
 8005324:	e005      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005326:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	4a0e      	ldr	r2, [pc, #56]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800532c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005330:	6093      	str	r3, [r2, #8]
 8005332:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005334:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533e:	4909      	ldr	r1, [pc, #36]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005340:	4313      	orrs	r3, r2
 8005342:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005356:	4b04      	ldr	r3, [pc, #16]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005358:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40023800 	.word	0x40023800
 8005368:	424711e0 	.word	0x424711e0

0800536c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e025      	b.n	80053cc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d106      	bne.n	800539a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fb ffe5 	bl	8001364 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f001 fcc1 	bl	8006d34 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	461a      	mov	r2, r3
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	f001 fd2c 	bl	8006e1a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d101      	bne.n	80053f0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80053ec:	2302      	movs	r3, #2
 80053ee:	e018      	b.n	8005422 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	4618      	mov	r0, r3
 8005402:	f001 fd89 	bl	8006f18 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d104      	bne.n	8005418 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2205      	movs	r2, #5
 8005412:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005416:	e003      	b.n	8005420 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d101      	bne.n	8005444 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005440:	2302      	movs	r3, #2
 8005442:	e00e      	b.n	8005462 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f001 fd9c 	bl	8006f90 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b082      	sub	sp, #8
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e07b      	b.n	8005574 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	d108      	bne.n	8005496 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800548c:	d009      	beq.n	80054a2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	61da      	str	r2, [r3, #28]
 8005494:	e005      	b.n	80054a2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d106      	bne.n	80054c2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7fb fdef 	bl	80010a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	ea42 0103 	orr.w	r1, r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	0c1b      	lsrs	r3, r3, #16
 8005540:	f003 0104 	and.w	r1, r3, #4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	f003 0210 	and.w	r2, r3, #16
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69da      	ldr	r2, [r3, #28]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005562:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e01a      	b.n	80055c4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2202      	movs	r2, #2
 8005592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fb fdc2 	bl	8001130 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	4613      	mov	r3, r2
 80055da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_SPI_Transmit+0x22>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e126      	b.n	800583c <HAL_SPI_Transmit+0x270>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055f6:	f7fd f9ef 	bl	80029d8 <HAL_GetTick>
 80055fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b01      	cmp	r3, #1
 800560a:	d002      	beq.n	8005612 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800560c:	2302      	movs	r3, #2
 800560e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005610:	e10b      	b.n	800582a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <HAL_SPI_Transmit+0x52>
 8005618:	88fb      	ldrh	r3, [r7, #6]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005622:	e102      	b.n	800582a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2203      	movs	r2, #3
 8005628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	88fa      	ldrh	r2, [r7, #6]
 800563c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	88fa      	ldrh	r2, [r7, #6]
 8005642:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566a:	d10f      	bne.n	800568c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800567a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800568a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005696:	2b40      	cmp	r3, #64	; 0x40
 8005698:	d007      	beq.n	80056aa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b2:	d14b      	bne.n	800574c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_SPI_Transmit+0xf6>
 80056bc:	8afb      	ldrh	r3, [r7, #22]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d13e      	bne.n	8005740 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c6:	881a      	ldrh	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d2:	1c9a      	adds	r2, r3, #2
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3b01      	subs	r3, #1
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056e6:	e02b      	b.n	8005740 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d112      	bne.n	800571c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	881a      	ldrh	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	1c9a      	adds	r2, r3, #2
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	86da      	strh	r2, [r3, #54]	; 0x36
 800571a:	e011      	b.n	8005740 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800571c:	f7fd f95c 	bl	80029d8 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d803      	bhi.n	8005734 <HAL_SPI_Transmit+0x168>
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005732:	d102      	bne.n	800573a <HAL_SPI_Transmit+0x16e>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d102      	bne.n	8005740 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800573e:	e074      	b.n	800582a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1ce      	bne.n	80056e8 <HAL_SPI_Transmit+0x11c>
 800574a:	e04c      	b.n	80057e6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_SPI_Transmit+0x18e>
 8005754:	8afb      	ldrh	r3, [r7, #22]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d140      	bne.n	80057dc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	330c      	adds	r3, #12
 8005764:	7812      	ldrb	r2, [r2, #0]
 8005766:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005780:	e02c      	b.n	80057dc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b02      	cmp	r3, #2
 800578e:	d113      	bne.n	80057b8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	330c      	adds	r3, #12
 800579a:	7812      	ldrb	r2, [r2, #0]
 800579c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80057b6:	e011      	b.n	80057dc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057b8:	f7fd f90e 	bl	80029d8 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d803      	bhi.n	80057d0 <HAL_SPI_Transmit+0x204>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	d102      	bne.n	80057d6 <HAL_SPI_Transmit+0x20a>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d102      	bne.n	80057dc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057da:	e026      	b.n	800582a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1cd      	bne.n	8005782 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	6839      	ldr	r1, [r7, #0]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 fbcc 	bl	8005f88 <SPI_EndRxTxTransaction>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005804:	2300      	movs	r3, #0
 8005806:	613b      	str	r3, [r7, #16]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	77fb      	strb	r3, [r7, #31]
 8005826:	e000      	b.n	800582a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005828:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800583a:	7ffb      	ldrb	r3, [r7, #31]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	4613      	mov	r3, r2
 8005852:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005860:	d112      	bne.n	8005888 <HAL_SPI_Receive+0x44>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10e      	bne.n	8005888 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2204      	movs	r2, #4
 800586e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005872:	88fa      	ldrh	r2, [r7, #6]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	4613      	mov	r3, r2
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	68b9      	ldr	r1, [r7, #8]
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 f8f1 	bl	8005a66 <HAL_SPI_TransmitReceive>
 8005884:	4603      	mov	r3, r0
 8005886:	e0ea      	b.n	8005a5e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_SPI_Receive+0x52>
 8005892:	2302      	movs	r3, #2
 8005894:	e0e3      	b.n	8005a5e <HAL_SPI_Receive+0x21a>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800589e:	f7fd f89b 	bl	80029d8 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d002      	beq.n	80058b6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80058b0:	2302      	movs	r3, #2
 80058b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058b4:	e0ca      	b.n	8005a4c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_SPI_Receive+0x7e>
 80058bc:	88fb      	ldrh	r3, [r7, #6]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d102      	bne.n	80058c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058c6:	e0c1      	b.n	8005a4c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2204      	movs	r2, #4
 80058cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	88fa      	ldrh	r2, [r7, #6]
 80058e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	88fa      	ldrh	r2, [r7, #6]
 80058e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800590e:	d10f      	bne.n	8005930 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800591e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800592e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b40      	cmp	r3, #64	; 0x40
 800593c:	d007      	beq.n	800594e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800594c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d162      	bne.n	8005a1c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005956:	e02e      	b.n	80059b6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b01      	cmp	r3, #1
 8005964:	d115      	bne.n	8005992 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f103 020c 	add.w	r2, r3, #12
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	7812      	ldrb	r2, [r2, #0]
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005990:	e011      	b.n	80059b6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005992:	f7fd f821 	bl	80029d8 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d803      	bhi.n	80059aa <HAL_SPI_Receive+0x166>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d102      	bne.n	80059b0 <HAL_SPI_Receive+0x16c>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059b4:	e04a      	b.n	8005a4c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1cb      	bne.n	8005958 <HAL_SPI_Receive+0x114>
 80059c0:	e031      	b.n	8005a26 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d113      	bne.n	80059f8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	b292      	uxth	r2, r2
 80059dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	1c9a      	adds	r2, r3, #2
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059f6:	e011      	b.n	8005a1c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059f8:	f7fc ffee 	bl	80029d8 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d803      	bhi.n	8005a10 <HAL_SPI_Receive+0x1cc>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	d102      	bne.n	8005a16 <HAL_SPI_Receive+0x1d2>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d102      	bne.n	8005a1c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a1a:	e017      	b.n	8005a4c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1cd      	bne.n	80059c2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 fa46 	bl	8005ebc <SPI_EndRxTransaction>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	75fb      	strb	r3, [r7, #23]
 8005a48:	e000      	b.n	8005a4c <HAL_SPI_Receive+0x208>
  }

error :
 8005a4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b08c      	sub	sp, #48	; 0x30
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	607a      	str	r2, [r7, #4]
 8005a72:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a74:	2301      	movs	r3, #1
 8005a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d101      	bne.n	8005a8c <HAL_SPI_TransmitReceive+0x26>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	e18a      	b.n	8005da2 <HAL_SPI_TransmitReceive+0x33c>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a94:	f7fc ffa0 	bl	80029d8 <HAL_GetTick>
 8005a98:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005aaa:	887b      	ldrh	r3, [r7, #2]
 8005aac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d00f      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x70>
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005abc:	d107      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d103      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x68>
 8005ac6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d003      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ad4:	e15b      	b.n	8005d8e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <HAL_SPI_TransmitReceive+0x82>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <HAL_SPI_TransmitReceive+0x82>
 8005ae2:	887b      	ldrh	r3, [r7, #2]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d103      	bne.n	8005af0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005aee:	e14e      	b.n	8005d8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d003      	beq.n	8005b04 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2205      	movs	r2, #5
 8005b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	887a      	ldrh	r2, [r7, #2]
 8005b14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	887a      	ldrh	r2, [r7, #2]
 8005b1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	887a      	ldrh	r2, [r7, #2]
 8005b26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	887a      	ldrh	r2, [r7, #2]
 8005b2c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	d007      	beq.n	8005b58 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b60:	d178      	bne.n	8005c54 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <HAL_SPI_TransmitReceive+0x10a>
 8005b6a:	8b7b      	ldrh	r3, [r7, #26]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d166      	bne.n	8005c3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	881a      	ldrh	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	1c9a      	adds	r2, r3, #2
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b94:	e053      	b.n	8005c3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d11b      	bne.n	8005bdc <HAL_SPI_TransmitReceive+0x176>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d016      	beq.n	8005bdc <HAL_SPI_TransmitReceive+0x176>
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d113      	bne.n	8005bdc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb8:	881a      	ldrh	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	1c9a      	adds	r2, r3, #2
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d119      	bne.n	8005c1e <HAL_SPI_TransmitReceive+0x1b8>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d014      	beq.n	8005c1e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	b292      	uxth	r2, r2
 8005c00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	1c9a      	adds	r2, r3, #2
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c1e:	f7fc fedb 	bl	80029d8 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d807      	bhi.n	8005c3e <HAL_SPI_TransmitReceive+0x1d8>
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c34:	d003      	beq.n	8005c3e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c3c:	e0a7      	b.n	8005d8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1a6      	bne.n	8005b96 <HAL_SPI_TransmitReceive+0x130>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1a1      	bne.n	8005b96 <HAL_SPI_TransmitReceive+0x130>
 8005c52:	e07c      	b.n	8005d4e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <HAL_SPI_TransmitReceive+0x1fc>
 8005c5c:	8b7b      	ldrh	r3, [r7, #26]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d16b      	bne.n	8005d3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	330c      	adds	r3, #12
 8005c6c:	7812      	ldrb	r2, [r2, #0]
 8005c6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c88:	e057      	b.n	8005d3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d11c      	bne.n	8005cd2 <HAL_SPI_TransmitReceive+0x26c>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d017      	beq.n	8005cd2 <HAL_SPI_TransmitReceive+0x26c>
 8005ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d114      	bne.n	8005cd2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	7812      	ldrb	r2, [r2, #0]
 8005cb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d119      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x2ae>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d014      	beq.n	8005d14 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d10:	2301      	movs	r3, #1
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d14:	f7fc fe60 	bl	80029d8 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d803      	bhi.n	8005d2c <HAL_SPI_TransmitReceive+0x2c6>
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2a:	d102      	bne.n	8005d32 <HAL_SPI_TransmitReceive+0x2cc>
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d103      	bne.n	8005d3a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d38:	e029      	b.n	8005d8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1a2      	bne.n	8005c8a <HAL_SPI_TransmitReceive+0x224>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d19d      	bne.n	8005c8a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 f918 	bl	8005f88 <SPI_EndRxTxTransaction>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d006      	beq.n	8005d6c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d6a:	e010      	b.n	8005d8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10b      	bne.n	8005d8c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	e000      	b.n	8005d8e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3730      	adds	r7, #48	; 0x30
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	4613      	mov	r3, r2
 8005dba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005dbc:	f7fc fe0c 	bl	80029d8 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	1a9b      	subs	r3, r3, r2
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	4413      	add	r3, r2
 8005dca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dcc:	f7fc fe04 	bl	80029d8 <HAL_GetTick>
 8005dd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dd2:	4b39      	ldr	r3, [pc, #228]	; (8005eb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	015b      	lsls	r3, r3, #5
 8005dd8:	0d1b      	lsrs	r3, r3, #20
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	fb02 f303 	mul.w	r3, r2, r3
 8005de0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005de2:	e054      	b.n	8005e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dea:	d050      	beq.n	8005e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dec:	f7fc fdf4 	bl	80029d8 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d902      	bls.n	8005e02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d13d      	bne.n	8005e7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e1a:	d111      	bne.n	8005e40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e24:	d004      	beq.n	8005e30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e2e:	d107      	bne.n	8005e40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e48:	d10f      	bne.n	8005e6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e017      	b.n	8005eae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4013      	ands	r3, r2
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	bf0c      	ite	eq
 8005e9e:	2301      	moveq	r3, #1
 8005ea0:	2300      	movne	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d19b      	bne.n	8005de4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3720      	adds	r7, #32
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000000 	.word	0x20000000

08005ebc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ed0:	d111      	bne.n	8005ef6 <SPI_EndRxTransaction+0x3a>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eda:	d004      	beq.n	8005ee6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee4:	d107      	bne.n	8005ef6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005efe:	d12a      	bne.n	8005f56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f08:	d012      	beq.n	8005f30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2200      	movs	r2, #0
 8005f12:	2180      	movs	r1, #128	; 0x80
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7ff ff49 	bl	8005dac <SPI_WaitFlagStateUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d02d      	beq.n	8005f7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f24:	f043 0220 	orr.w	r2, r3, #32
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e026      	b.n	8005f7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2200      	movs	r2, #0
 8005f38:	2101      	movs	r1, #1
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f7ff ff36 	bl	8005dac <SPI_WaitFlagStateUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d01a      	beq.n	8005f7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4a:	f043 0220 	orr.w	r2, r3, #32
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e013      	b.n	8005f7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2101      	movs	r1, #1
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f7ff ff23 	bl	8005dac <SPI_WaitFlagStateUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f70:	f043 0220 	orr.w	r2, r3, #32
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e000      	b.n	8005f7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f94:	4b1b      	ldr	r3, [pc, #108]	; (8006004 <SPI_EndRxTxTransaction+0x7c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1b      	ldr	r2, [pc, #108]	; (8006008 <SPI_EndRxTxTransaction+0x80>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	0d5b      	lsrs	r3, r3, #21
 8005fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fa4:	fb02 f303 	mul.w	r3, r2, r3
 8005fa8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fb2:	d112      	bne.n	8005fda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2180      	movs	r1, #128	; 0x80
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff fef4 	bl	8005dac <SPI_WaitFlagStateUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d016      	beq.n	8005ff8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fce:	f043 0220 	orr.w	r2, r3, #32
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e00f      	b.n	8005ffa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00a      	beq.n	8005ff6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff0:	2b80      	cmp	r3, #128	; 0x80
 8005ff2:	d0f2      	beq.n	8005fda <SPI_EndRxTxTransaction+0x52>
 8005ff4:	e000      	b.n	8005ff8 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ff6:	bf00      	nop
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000000 	.word	0x20000000
 8006008:	165e9f81 	.word	0x165e9f81

0800600c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e041      	b.n	80060a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fb f89a 	bl	800116c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3304      	adds	r3, #4
 8006048:	4619      	mov	r1, r3
 800604a:	4610      	mov	r0, r2
 800604c:	f000 fa92 	bl	8006574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d001      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e04e      	b.n	8006162 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0201 	orr.w	r2, r2, #1
 80060da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a23      	ldr	r2, [pc, #140]	; (8006170 <HAL_TIM_Base_Start_IT+0xc4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d022      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x80>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ee:	d01d      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x80>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1f      	ldr	r2, [pc, #124]	; (8006174 <HAL_TIM_Base_Start_IT+0xc8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d018      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x80>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1e      	ldr	r2, [pc, #120]	; (8006178 <HAL_TIM_Base_Start_IT+0xcc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d013      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x80>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1c      	ldr	r2, [pc, #112]	; (800617c <HAL_TIM_Base_Start_IT+0xd0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d00e      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x80>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1b      	ldr	r2, [pc, #108]	; (8006180 <HAL_TIM_Base_Start_IT+0xd4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d009      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x80>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a19      	ldr	r2, [pc, #100]	; (8006184 <HAL_TIM_Base_Start_IT+0xd8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d004      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x80>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a18      	ldr	r2, [pc, #96]	; (8006188 <HAL_TIM_Base_Start_IT+0xdc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d111      	bne.n	8006150 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2b06      	cmp	r3, #6
 800613c:	d010      	beq.n	8006160 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f042 0201 	orr.w	r2, r2, #1
 800614c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614e:	e007      	b.n	8006160 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0201 	orr.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40010000 	.word	0x40010000
 8006174:	40000400 	.word	0x40000400
 8006178:	40000800 	.word	0x40000800
 800617c:	40000c00 	.word	0x40000c00
 8006180:	40010400 	.word	0x40010400
 8006184:	40014000 	.word	0x40014000
 8006188:	40001800 	.word	0x40001800

0800618c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d122      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d11b      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0202 	mvn.w	r2, #2
 80061b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f9b2 	bl	8006538 <HAL_TIM_IC_CaptureCallback>
 80061d4:	e005      	b.n	80061e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f9a4 	bl	8006524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f9b5 	bl	800654c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d122      	bne.n	800623c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b04      	cmp	r3, #4
 8006202:	d11b      	bne.n	800623c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f06f 0204 	mvn.w	r2, #4
 800620c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2202      	movs	r2, #2
 8006212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f988 	bl	8006538 <HAL_TIM_IC_CaptureCallback>
 8006228:	e005      	b.n	8006236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f97a 	bl	8006524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f98b 	bl	800654c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b08      	cmp	r3, #8
 8006248:	d122      	bne.n	8006290 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f003 0308 	and.w	r3, r3, #8
 8006254:	2b08      	cmp	r3, #8
 8006256:	d11b      	bne.n	8006290 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0208 	mvn.w	r2, #8
 8006260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2204      	movs	r2, #4
 8006266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f95e 	bl	8006538 <HAL_TIM_IC_CaptureCallback>
 800627c:	e005      	b.n	800628a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f950 	bl	8006524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f961 	bl	800654c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b10      	cmp	r3, #16
 800629c:	d122      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b10      	cmp	r3, #16
 80062aa:	d11b      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0210 	mvn.w	r2, #16
 80062b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2208      	movs	r2, #8
 80062ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f934 	bl	8006538 <HAL_TIM_IC_CaptureCallback>
 80062d0:	e005      	b.n	80062de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f926 	bl	8006524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f937 	bl	800654c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d10e      	bne.n	8006310 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d107      	bne.n	8006310 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0201 	mvn.w	r2, #1
 8006308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fa fce0 	bl	8000cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631a:	2b80      	cmp	r3, #128	; 0x80
 800631c:	d10e      	bne.n	800633c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006328:	2b80      	cmp	r3, #128	; 0x80
 800632a:	d107      	bne.n	800633c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fadc 	bl	80068f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006346:	2b40      	cmp	r3, #64	; 0x40
 8006348:	d10e      	bne.n	8006368 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006354:	2b40      	cmp	r3, #64	; 0x40
 8006356:	d107      	bne.n	8006368 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f8fc 	bl	8006560 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b20      	cmp	r3, #32
 8006374:	d10e      	bne.n	8006394 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b20      	cmp	r3, #32
 8006382:	d107      	bne.n	8006394 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0220 	mvn.w	r2, #32
 800638c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 faa6 	bl	80068e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_TIM_ConfigClockSource+0x18>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e0b3      	b.n	800651c <HAL_TIM_ConfigClockSource+0x180>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ec:	d03e      	beq.n	800646c <HAL_TIM_ConfigClockSource+0xd0>
 80063ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063f2:	f200 8087 	bhi.w	8006504 <HAL_TIM_ConfigClockSource+0x168>
 80063f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063fa:	f000 8085 	beq.w	8006508 <HAL_TIM_ConfigClockSource+0x16c>
 80063fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006402:	d87f      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x168>
 8006404:	2b70      	cmp	r3, #112	; 0x70
 8006406:	d01a      	beq.n	800643e <HAL_TIM_ConfigClockSource+0xa2>
 8006408:	2b70      	cmp	r3, #112	; 0x70
 800640a:	d87b      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x168>
 800640c:	2b60      	cmp	r3, #96	; 0x60
 800640e:	d050      	beq.n	80064b2 <HAL_TIM_ConfigClockSource+0x116>
 8006410:	2b60      	cmp	r3, #96	; 0x60
 8006412:	d877      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x168>
 8006414:	2b50      	cmp	r3, #80	; 0x50
 8006416:	d03c      	beq.n	8006492 <HAL_TIM_ConfigClockSource+0xf6>
 8006418:	2b50      	cmp	r3, #80	; 0x50
 800641a:	d873      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x168>
 800641c:	2b40      	cmp	r3, #64	; 0x40
 800641e:	d058      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0x136>
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d86f      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x168>
 8006424:	2b30      	cmp	r3, #48	; 0x30
 8006426:	d064      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x156>
 8006428:	2b30      	cmp	r3, #48	; 0x30
 800642a:	d86b      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x168>
 800642c:	2b20      	cmp	r3, #32
 800642e:	d060      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x156>
 8006430:	2b20      	cmp	r3, #32
 8006432:	d867      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x168>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d05c      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x156>
 8006438:	2b10      	cmp	r3, #16
 800643a:	d05a      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800643c:	e062      	b.n	8006504 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6899      	ldr	r1, [r3, #8]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f000 f9ab 	bl	80067a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006460:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	609a      	str	r2, [r3, #8]
      break;
 800646a:	e04e      	b.n	800650a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6818      	ldr	r0, [r3, #0]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	6899      	ldr	r1, [r3, #8]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f000 f994 	bl	80067a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800648e:	609a      	str	r2, [r3, #8]
      break;
 8006490:	e03b      	b.n	800650a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	6859      	ldr	r1, [r3, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	461a      	mov	r2, r3
 80064a0:	f000 f908 	bl	80066b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2150      	movs	r1, #80	; 0x50
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 f961 	bl	8006772 <TIM_ITRx_SetConfig>
      break;
 80064b0:	e02b      	b.n	800650a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	6859      	ldr	r1, [r3, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	461a      	mov	r2, r3
 80064c0:	f000 f927 	bl	8006712 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2160      	movs	r1, #96	; 0x60
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 f951 	bl	8006772 <TIM_ITRx_SetConfig>
      break;
 80064d0:	e01b      	b.n	800650a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6818      	ldr	r0, [r3, #0]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	6859      	ldr	r1, [r3, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	461a      	mov	r2, r3
 80064e0:	f000 f8e8 	bl	80066b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2140      	movs	r1, #64	; 0x40
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 f941 	bl	8006772 <TIM_ITRx_SetConfig>
      break;
 80064f0:	e00b      	b.n	800650a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4619      	mov	r1, r3
 80064fc:	4610      	mov	r0, r2
 80064fe:	f000 f938 	bl	8006772 <TIM_ITRx_SetConfig>
        break;
 8006502:	e002      	b.n	800650a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006504:	bf00      	nop
 8006506:	e000      	b.n	800650a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006508:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a40      	ldr	r2, [pc, #256]	; (8006688 <TIM_Base_SetConfig+0x114>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d013      	beq.n	80065b4 <TIM_Base_SetConfig+0x40>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006592:	d00f      	beq.n	80065b4 <TIM_Base_SetConfig+0x40>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a3d      	ldr	r2, [pc, #244]	; (800668c <TIM_Base_SetConfig+0x118>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00b      	beq.n	80065b4 <TIM_Base_SetConfig+0x40>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a3c      	ldr	r2, [pc, #240]	; (8006690 <TIM_Base_SetConfig+0x11c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d007      	beq.n	80065b4 <TIM_Base_SetConfig+0x40>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a3b      	ldr	r2, [pc, #236]	; (8006694 <TIM_Base_SetConfig+0x120>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d003      	beq.n	80065b4 <TIM_Base_SetConfig+0x40>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a3a      	ldr	r2, [pc, #232]	; (8006698 <TIM_Base_SetConfig+0x124>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d108      	bne.n	80065c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a2f      	ldr	r2, [pc, #188]	; (8006688 <TIM_Base_SetConfig+0x114>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d02b      	beq.n	8006626 <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d4:	d027      	beq.n	8006626 <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a2c      	ldr	r2, [pc, #176]	; (800668c <TIM_Base_SetConfig+0x118>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d023      	beq.n	8006626 <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a2b      	ldr	r2, [pc, #172]	; (8006690 <TIM_Base_SetConfig+0x11c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d01f      	beq.n	8006626 <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a2a      	ldr	r2, [pc, #168]	; (8006694 <TIM_Base_SetConfig+0x120>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d01b      	beq.n	8006626 <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a29      	ldr	r2, [pc, #164]	; (8006698 <TIM_Base_SetConfig+0x124>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d017      	beq.n	8006626 <TIM_Base_SetConfig+0xb2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a28      	ldr	r2, [pc, #160]	; (800669c <TIM_Base_SetConfig+0x128>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d013      	beq.n	8006626 <TIM_Base_SetConfig+0xb2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a27      	ldr	r2, [pc, #156]	; (80066a0 <TIM_Base_SetConfig+0x12c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00f      	beq.n	8006626 <TIM_Base_SetConfig+0xb2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a26      	ldr	r2, [pc, #152]	; (80066a4 <TIM_Base_SetConfig+0x130>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00b      	beq.n	8006626 <TIM_Base_SetConfig+0xb2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a25      	ldr	r2, [pc, #148]	; (80066a8 <TIM_Base_SetConfig+0x134>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d007      	beq.n	8006626 <TIM_Base_SetConfig+0xb2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a24      	ldr	r2, [pc, #144]	; (80066ac <TIM_Base_SetConfig+0x138>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d003      	beq.n	8006626 <TIM_Base_SetConfig+0xb2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a23      	ldr	r2, [pc, #140]	; (80066b0 <TIM_Base_SetConfig+0x13c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d108      	bne.n	8006638 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800662c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a0a      	ldr	r2, [pc, #40]	; (8006688 <TIM_Base_SetConfig+0x114>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_Base_SetConfig+0xf8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a0c      	ldr	r2, [pc, #48]	; (8006698 <TIM_Base_SetConfig+0x124>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d103      	bne.n	8006674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	615a      	str	r2, [r3, #20]
}
 800667a:	bf00      	nop
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	40010000 	.word	0x40010000
 800668c:	40000400 	.word	0x40000400
 8006690:	40000800 	.word	0x40000800
 8006694:	40000c00 	.word	0x40000c00
 8006698:	40010400 	.word	0x40010400
 800669c:	40014000 	.word	0x40014000
 80066a0:	40014400 	.word	0x40014400
 80066a4:	40014800 	.word	0x40014800
 80066a8:	40001800 	.word	0x40001800
 80066ac:	40001c00 	.word	0x40001c00
 80066b0:	40002000 	.word	0x40002000

080066b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f023 0201 	bic.w	r2, r3, #1
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f023 030a 	bic.w	r3, r3, #10
 80066f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	621a      	str	r2, [r3, #32]
}
 8006706:	bf00      	nop
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006712:	b480      	push	{r7}
 8006714:	b087      	sub	sp, #28
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f023 0210 	bic.w	r2, r3, #16
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800673c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	031b      	lsls	r3, r3, #12
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800674e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006772:	b480      	push	{r7}
 8006774:	b085      	sub	sp, #20
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006788:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	f043 0307 	orr.w	r3, r3, #7
 8006794:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	609a      	str	r2, [r3, #8]
}
 800679c:	bf00      	nop
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	021a      	lsls	r2, r3, #8
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	431a      	orrs	r2, r3
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	609a      	str	r2, [r3, #8]
}
 80067dc:	bf00      	nop
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e05a      	b.n	80068b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a21      	ldr	r2, [pc, #132]	; (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d022      	beq.n	800688a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800684c:	d01d      	beq.n	800688a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1d      	ldr	r2, [pc, #116]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d018      	beq.n	800688a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1b      	ldr	r2, [pc, #108]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d013      	beq.n	800688a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1a      	ldr	r2, [pc, #104]	; (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00e      	beq.n	800688a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a18      	ldr	r2, [pc, #96]	; (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d009      	beq.n	800688a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a17      	ldr	r2, [pc, #92]	; (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d004      	beq.n	800688a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a15      	ldr	r2, [pc, #84]	; (80068dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d10c      	bne.n	80068a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	4313      	orrs	r3, r2
 800689a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40010000 	.word	0x40010000
 80068c8:	40000400 	.word	0x40000400
 80068cc:	40000800 	.word	0x40000800
 80068d0:	40000c00 	.word	0x40000c00
 80068d4:	40010400 	.word	0x40010400
 80068d8:	40014000 	.word	0x40014000
 80068dc:	40001800 	.word	0x40001800

080068e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e03f      	b.n	800699a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fa fc3e 	bl	80011b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2224      	movs	r2, #36	; 0x24
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800694a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f829 	bl	80069a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	691a      	ldr	r2, [r3, #16]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006960:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	695a      	ldr	r2, [r3, #20]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006970:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006980:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2220      	movs	r2, #32
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a8:	b09f      	sub	sp, #124	; 0x7c
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ba:	68d9      	ldr	r1, [r3, #12]
 80069bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	ea40 0301 	orr.w	r3, r0, r1
 80069c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	431a      	orrs	r2, r3
 80069d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	431a      	orrs	r2, r3
 80069d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	4313      	orrs	r3, r2
 80069dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80069de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80069e8:	f021 010c 	bic.w	r1, r1, #12
 80069ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069f2:	430b      	orrs	r3, r1
 80069f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a02:	6999      	ldr	r1, [r3, #24]
 8006a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	ea40 0301 	orr.w	r3, r0, r1
 8006a0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	4bc5      	ldr	r3, [pc, #788]	; (8006d28 <UART_SetConfig+0x384>)
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d004      	beq.n	8006a22 <UART_SetConfig+0x7e>
 8006a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	4bc3      	ldr	r3, [pc, #780]	; (8006d2c <UART_SetConfig+0x388>)
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d103      	bne.n	8006a2a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a22:	f7fe fa9f 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 8006a26:	6778      	str	r0, [r7, #116]	; 0x74
 8006a28:	e002      	b.n	8006a30 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a2a:	f7fe fa87 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 8006a2e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a38:	f040 80b6 	bne.w	8006ba8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a3e:	461c      	mov	r4, r3
 8006a40:	f04f 0500 	mov.w	r5, #0
 8006a44:	4622      	mov	r2, r4
 8006a46:	462b      	mov	r3, r5
 8006a48:	1891      	adds	r1, r2, r2
 8006a4a:	6439      	str	r1, [r7, #64]	; 0x40
 8006a4c:	415b      	adcs	r3, r3
 8006a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a54:	1912      	adds	r2, r2, r4
 8006a56:	eb45 0303 	adc.w	r3, r5, r3
 8006a5a:	f04f 0000 	mov.w	r0, #0
 8006a5e:	f04f 0100 	mov.w	r1, #0
 8006a62:	00d9      	lsls	r1, r3, #3
 8006a64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a68:	00d0      	lsls	r0, r2, #3
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	1911      	adds	r1, r2, r4
 8006a70:	6639      	str	r1, [r7, #96]	; 0x60
 8006a72:	416b      	adcs	r3, r5
 8006a74:	667b      	str	r3, [r7, #100]	; 0x64
 8006a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f04f 0300 	mov.w	r3, #0
 8006a80:	1891      	adds	r1, r2, r2
 8006a82:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a84:	415b      	adcs	r3, r3
 8006a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006a90:	f7f9 fbac 	bl	80001ec <__aeabi_uldivmod>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4ba5      	ldr	r3, [pc, #660]	; (8006d30 <UART_SetConfig+0x38c>)
 8006a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a9e:	095b      	lsrs	r3, r3, #5
 8006aa0:	011e      	lsls	r6, r3, #4
 8006aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aa4:	461c      	mov	r4, r3
 8006aa6:	f04f 0500 	mov.w	r5, #0
 8006aaa:	4622      	mov	r2, r4
 8006aac:	462b      	mov	r3, r5
 8006aae:	1891      	adds	r1, r2, r2
 8006ab0:	6339      	str	r1, [r7, #48]	; 0x30
 8006ab2:	415b      	adcs	r3, r3
 8006ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006aba:	1912      	adds	r2, r2, r4
 8006abc:	eb45 0303 	adc.w	r3, r5, r3
 8006ac0:	f04f 0000 	mov.w	r0, #0
 8006ac4:	f04f 0100 	mov.w	r1, #0
 8006ac8:	00d9      	lsls	r1, r3, #3
 8006aca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ace:	00d0      	lsls	r0, r2, #3
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	1911      	adds	r1, r2, r4
 8006ad6:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ad8:	416b      	adcs	r3, r5
 8006ada:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	f04f 0300 	mov.w	r3, #0
 8006ae6:	1891      	adds	r1, r2, r2
 8006ae8:	62b9      	str	r1, [r7, #40]	; 0x28
 8006aea:	415b      	adcs	r3, r3
 8006aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006af2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006af6:	f7f9 fb79 	bl	80001ec <__aeabi_uldivmod>
 8006afa:	4602      	mov	r2, r0
 8006afc:	460b      	mov	r3, r1
 8006afe:	4b8c      	ldr	r3, [pc, #560]	; (8006d30 <UART_SetConfig+0x38c>)
 8006b00:	fba3 1302 	umull	r1, r3, r3, r2
 8006b04:	095b      	lsrs	r3, r3, #5
 8006b06:	2164      	movs	r1, #100	; 0x64
 8006b08:	fb01 f303 	mul.w	r3, r1, r3
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	3332      	adds	r3, #50	; 0x32
 8006b12:	4a87      	ldr	r2, [pc, #540]	; (8006d30 <UART_SetConfig+0x38c>)
 8006b14:	fba2 2303 	umull	r2, r3, r2, r3
 8006b18:	095b      	lsrs	r3, r3, #5
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b20:	441e      	add	r6, r3
 8006b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b24:	4618      	mov	r0, r3
 8006b26:	f04f 0100 	mov.w	r1, #0
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	1894      	adds	r4, r2, r2
 8006b30:	623c      	str	r4, [r7, #32]
 8006b32:	415b      	adcs	r3, r3
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
 8006b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b3a:	1812      	adds	r2, r2, r0
 8006b3c:	eb41 0303 	adc.w	r3, r1, r3
 8006b40:	f04f 0400 	mov.w	r4, #0
 8006b44:	f04f 0500 	mov.w	r5, #0
 8006b48:	00dd      	lsls	r5, r3, #3
 8006b4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b4e:	00d4      	lsls	r4, r2, #3
 8006b50:	4622      	mov	r2, r4
 8006b52:	462b      	mov	r3, r5
 8006b54:	1814      	adds	r4, r2, r0
 8006b56:	653c      	str	r4, [r7, #80]	; 0x50
 8006b58:	414b      	adcs	r3, r1
 8006b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	461a      	mov	r2, r3
 8006b62:	f04f 0300 	mov.w	r3, #0
 8006b66:	1891      	adds	r1, r2, r2
 8006b68:	61b9      	str	r1, [r7, #24]
 8006b6a:	415b      	adcs	r3, r3
 8006b6c:	61fb      	str	r3, [r7, #28]
 8006b6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006b76:	f7f9 fb39 	bl	80001ec <__aeabi_uldivmod>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4b6c      	ldr	r3, [pc, #432]	; (8006d30 <UART_SetConfig+0x38c>)
 8006b80:	fba3 1302 	umull	r1, r3, r3, r2
 8006b84:	095b      	lsrs	r3, r3, #5
 8006b86:	2164      	movs	r1, #100	; 0x64
 8006b88:	fb01 f303 	mul.w	r3, r1, r3
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	3332      	adds	r3, #50	; 0x32
 8006b92:	4a67      	ldr	r2, [pc, #412]	; (8006d30 <UART_SetConfig+0x38c>)
 8006b94:	fba2 2303 	umull	r2, r3, r2, r3
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	f003 0207 	and.w	r2, r3, #7
 8006b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4432      	add	r2, r6
 8006ba4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ba6:	e0b9      	b.n	8006d1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006baa:	461c      	mov	r4, r3
 8006bac:	f04f 0500 	mov.w	r5, #0
 8006bb0:	4622      	mov	r2, r4
 8006bb2:	462b      	mov	r3, r5
 8006bb4:	1891      	adds	r1, r2, r2
 8006bb6:	6139      	str	r1, [r7, #16]
 8006bb8:	415b      	adcs	r3, r3
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006bc0:	1912      	adds	r2, r2, r4
 8006bc2:	eb45 0303 	adc.w	r3, r5, r3
 8006bc6:	f04f 0000 	mov.w	r0, #0
 8006bca:	f04f 0100 	mov.w	r1, #0
 8006bce:	00d9      	lsls	r1, r3, #3
 8006bd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bd4:	00d0      	lsls	r0, r2, #3
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	eb12 0804 	adds.w	r8, r2, r4
 8006bde:	eb43 0905 	adc.w	r9, r3, r5
 8006be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f04f 0100 	mov.w	r1, #0
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	f04f 0300 	mov.w	r3, #0
 8006bf4:	008b      	lsls	r3, r1, #2
 8006bf6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006bfa:	0082      	lsls	r2, r0, #2
 8006bfc:	4640      	mov	r0, r8
 8006bfe:	4649      	mov	r1, r9
 8006c00:	f7f9 faf4 	bl	80001ec <__aeabi_uldivmod>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4b49      	ldr	r3, [pc, #292]	; (8006d30 <UART_SetConfig+0x38c>)
 8006c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c0e:	095b      	lsrs	r3, r3, #5
 8006c10:	011e      	lsls	r6, r3, #4
 8006c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c14:	4618      	mov	r0, r3
 8006c16:	f04f 0100 	mov.w	r1, #0
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	1894      	adds	r4, r2, r2
 8006c20:	60bc      	str	r4, [r7, #8]
 8006c22:	415b      	adcs	r3, r3
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c2a:	1812      	adds	r2, r2, r0
 8006c2c:	eb41 0303 	adc.w	r3, r1, r3
 8006c30:	f04f 0400 	mov.w	r4, #0
 8006c34:	f04f 0500 	mov.w	r5, #0
 8006c38:	00dd      	lsls	r5, r3, #3
 8006c3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c3e:	00d4      	lsls	r4, r2, #3
 8006c40:	4622      	mov	r2, r4
 8006c42:	462b      	mov	r3, r5
 8006c44:	1814      	adds	r4, r2, r0
 8006c46:	64bc      	str	r4, [r7, #72]	; 0x48
 8006c48:	414b      	adcs	r3, r1
 8006c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f04f 0100 	mov.w	r1, #0
 8006c56:	f04f 0200 	mov.w	r2, #0
 8006c5a:	f04f 0300 	mov.w	r3, #0
 8006c5e:	008b      	lsls	r3, r1, #2
 8006c60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c64:	0082      	lsls	r2, r0, #2
 8006c66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006c6a:	f7f9 fabf 	bl	80001ec <__aeabi_uldivmod>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4b2f      	ldr	r3, [pc, #188]	; (8006d30 <UART_SetConfig+0x38c>)
 8006c74:	fba3 1302 	umull	r1, r3, r3, r2
 8006c78:	095b      	lsrs	r3, r3, #5
 8006c7a:	2164      	movs	r1, #100	; 0x64
 8006c7c:	fb01 f303 	mul.w	r3, r1, r3
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	3332      	adds	r3, #50	; 0x32
 8006c86:	4a2a      	ldr	r2, [pc, #168]	; (8006d30 <UART_SetConfig+0x38c>)
 8006c88:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8c:	095b      	lsrs	r3, r3, #5
 8006c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c92:	441e      	add	r6, r3
 8006c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c96:	4618      	mov	r0, r3
 8006c98:	f04f 0100 	mov.w	r1, #0
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	1894      	adds	r4, r2, r2
 8006ca2:	603c      	str	r4, [r7, #0]
 8006ca4:	415b      	adcs	r3, r3
 8006ca6:	607b      	str	r3, [r7, #4]
 8006ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cac:	1812      	adds	r2, r2, r0
 8006cae:	eb41 0303 	adc.w	r3, r1, r3
 8006cb2:	f04f 0400 	mov.w	r4, #0
 8006cb6:	f04f 0500 	mov.w	r5, #0
 8006cba:	00dd      	lsls	r5, r3, #3
 8006cbc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006cc0:	00d4      	lsls	r4, r2, #3
 8006cc2:	4622      	mov	r2, r4
 8006cc4:	462b      	mov	r3, r5
 8006cc6:	eb12 0a00 	adds.w	sl, r2, r0
 8006cca:	eb43 0b01 	adc.w	fp, r3, r1
 8006cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f04f 0100 	mov.w	r1, #0
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	008b      	lsls	r3, r1, #2
 8006ce2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ce6:	0082      	lsls	r2, r0, #2
 8006ce8:	4650      	mov	r0, sl
 8006cea:	4659      	mov	r1, fp
 8006cec:	f7f9 fa7e 	bl	80001ec <__aeabi_uldivmod>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <UART_SetConfig+0x38c>)
 8006cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	2164      	movs	r1, #100	; 0x64
 8006cfe:	fb01 f303 	mul.w	r3, r1, r3
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	3332      	adds	r3, #50	; 0x32
 8006d08:	4a09      	ldr	r2, [pc, #36]	; (8006d30 <UART_SetConfig+0x38c>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	f003 020f 	and.w	r2, r3, #15
 8006d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4432      	add	r2, r6
 8006d1a:	609a      	str	r2, [r3, #8]
}
 8006d1c:	bf00      	nop
 8006d1e:	377c      	adds	r7, #124	; 0x7c
 8006d20:	46bd      	mov	sp, r7
 8006d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d26:	bf00      	nop
 8006d28:	40011000 	.word	0x40011000
 8006d2c:	40011400 	.word	0x40011400
 8006d30:	51eb851f 	.word	0x51eb851f

08006d34 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d029      	beq.n	8006da2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006d5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d5e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d68:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8006d6e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8006d74:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8006d7a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006d80:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006d86:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006d8c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006d92:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	e034      	b.n	8006e0c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dae:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006db8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006dbe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006dd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006dd6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006de0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006de6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006dec:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006df2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006df8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b087      	sub	sp, #28
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d02e      	beq.n	8006e92 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e40:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006e50:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006e5a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006e64:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006e6e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006e78:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006e82:	4313      	orrs	r3, r2
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	609a      	str	r2, [r3, #8]
 8006e90:	e03b      	b.n	8006f0a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ea2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006ec8:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006ed8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006ee2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006eec:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006f34:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8006f3e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006f46:	4313      	orrs	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006f50:	f7fb fd42 	bl	80029d8 <HAL_GetTick>
 8006f54:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006f56:	e010      	b.n	8006f7a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5e:	d00c      	beq.n	8006f7a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d007      	beq.n	8006f76 <FMC_SDRAM_SendCommand+0x5e>
 8006f66:	f7fb fd37 	bl	80029d8 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d201      	bcs.n	8006f7a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e006      	b.n	8006f88 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d0e8      	beq.n	8006f58 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	695a      	ldr	r2, [r3, #20]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
	...

08006fb8 <__libc_init_array>:
 8006fb8:	b570      	push	{r4, r5, r6, lr}
 8006fba:	4d0d      	ldr	r5, [pc, #52]	; (8006ff0 <__libc_init_array+0x38>)
 8006fbc:	4c0d      	ldr	r4, [pc, #52]	; (8006ff4 <__libc_init_array+0x3c>)
 8006fbe:	1b64      	subs	r4, r4, r5
 8006fc0:	10a4      	asrs	r4, r4, #2
 8006fc2:	2600      	movs	r6, #0
 8006fc4:	42a6      	cmp	r6, r4
 8006fc6:	d109      	bne.n	8006fdc <__libc_init_array+0x24>
 8006fc8:	4d0b      	ldr	r5, [pc, #44]	; (8006ff8 <__libc_init_array+0x40>)
 8006fca:	4c0c      	ldr	r4, [pc, #48]	; (8006ffc <__libc_init_array+0x44>)
 8006fcc:	f000 f820 	bl	8007010 <_init>
 8006fd0:	1b64      	subs	r4, r4, r5
 8006fd2:	10a4      	asrs	r4, r4, #2
 8006fd4:	2600      	movs	r6, #0
 8006fd6:	42a6      	cmp	r6, r4
 8006fd8:	d105      	bne.n	8006fe6 <__libc_init_array+0x2e>
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe0:	4798      	blx	r3
 8006fe2:	3601      	adds	r6, #1
 8006fe4:	e7ee      	b.n	8006fc4 <__libc_init_array+0xc>
 8006fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fea:	4798      	blx	r3
 8006fec:	3601      	adds	r6, #1
 8006fee:	e7f2      	b.n	8006fd6 <__libc_init_array+0x1e>
 8006ff0:	08007350 	.word	0x08007350
 8006ff4:	08007350 	.word	0x08007350
 8006ff8:	08007350 	.word	0x08007350
 8006ffc:	08007354 	.word	0x08007354

08007000 <memset>:
 8007000:	4402      	add	r2, r0
 8007002:	4603      	mov	r3, r0
 8007004:	4293      	cmp	r3, r2
 8007006:	d100      	bne.n	800700a <memset+0xa>
 8007008:	4770      	bx	lr
 800700a:	f803 1b01 	strb.w	r1, [r3], #1
 800700e:	e7f9      	b.n	8007004 <memset+0x4>

08007010 <_init>:
 8007010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007012:	bf00      	nop
 8007014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007016:	bc08      	pop	{r3}
 8007018:	469e      	mov	lr, r3
 800701a:	4770      	bx	lr

0800701c <_fini>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	bf00      	nop
 8007020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007022:	bc08      	pop	{r3}
 8007024:	469e      	mov	lr, r3
 8007026:	4770      	bx	lr
